<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DataConveyer</name>
  </assembly>
  <members>
    <member name="T:Mavidian.DataConveyer.Common.ActionOnDuplicateKey">
      <summary>
            Action in case duplicate key is encountered on intake record.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ActionOnDuplicateKey.IgnoreItem">
      <summary>
            The item (key-value pair) is excluded from the record (first item wins).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ActionOnDuplicateKey.ReplaceItem">
      <summary>
            The previous value for the key is replaced (last item wins).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ActionOnDuplicateKey.ExcludeRecord">
      <summary>
            The entire intake record is excluded.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ActionOnDuplicateKey.AssignDefaultKey">
      <summary>
            The duplicate key is substituted by a default key.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.Constants">
      <summary>
            Provides constant values that apply to Data Conveyer processing.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.Constants.FootClusterRecNo">
      <summary>
        <see cref="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.StartRecNo" /> value for the foot cluster.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.Constants.HeadClusterRecNo">
      <summary>
        <see cref="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.StartRecNo" /> value for the head cluster.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.Constants.Unlimited">
      <summary>
            Value indicating no limit in <see cref="T:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig">configuration</see> parameters,
            such as <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeRecordLimit" />.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.DeferOutput">
      <summary>
            Timing when Data Conveyer will be allowed to start the <see cref="F:Mavidian.DataConveyer.Common.Phase.Output" /> phase.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.DeferOutput.Auto">
      <summary>
            Data Conveyer will start the <see cref="F:Mavidian.DataConveyer.Common.Phase.Output" /> phase at the earliest timing allowed.
            This timing depends on several factors, for example <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" />, <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" />
            or  <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AllowTransformToAlterFields" /> settings.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.DeferTransformation">
      <summary>
            Timing when Data Conveyer is allowed to start the <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.DeferTransformation.NotDeferred">
      <summary>
            No deferral; the <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase starts immediately upon beginning of processing.
            In this case, values returned by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordInitiator" /> function are ignored by Data Conveyer.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.DeferTransformation.UntilRecordInitiation">
      <summary>
            Start of the <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase until one of these 2 conditions, whichever comes first:
            <list type="bullet"><item>The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordInitiator" /> function (that Data Conveyer calls for each record read on intake) returns true.</item><item>All records have been read from Intake.</item></list>
            This is the only <see cref="T:Mavidian.DataConveyer.Common.DeferTransformation" /> setting where the return value from the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordInitiator" /> function is respected.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.DeferTransformation.UntilIntakeCompletion">
      <summary>
            Start of the <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase is deferred until completion of the entire Intake phase, including completion of record clustering.
            Note that in this case, values returned by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordInitiator" /> function are ignored by Data Conveyer,
            i.e. true value(s) will not trigger the start of the Transformation phase.
            Use of this setting is not recommended except for troubleshooting situations.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.DeferTransformation.Indefinitely">
      <summary>
            The <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase will never start.
            Note that as a result, the task returned by the <see cref="M:Mavidian.DataConveyer.Orchestrators.IOrchestrator.ExecuteAsync" /> method will never complete.
            This setting is for testing purposes only!
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.ExecutionState">
      <summary>
            Processing state of one of the three phases: Intake, Transformation or Output.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ExecutionState.NotYetStarted">
      <summary>
            Execution of the phase has not yet started. 
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ExecutionState.Running">
      <summary>
            Phase execution is in progress.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ExecutionState.Complete">
      <summary>
            Phase execution has finished.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.ExternalLine">
      <summary>
            A "unit of data" that Data Conveyer receives from Intake and sends to Output.
            It is a "sum-type" (also referred to as a discriminated union), which means objects of this class can take different forms represented by one of the derived types.
            Data Conveyer provides a <see cref="T:Mavidian.DataConveyer.Common.ExternalLineHelpers" /> class that contains a set of utilities, such as extension methods
            to help manipulate <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> objects, 
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ExternalLine.ClstrNo">
      <summary>
            Cluster number. Only meaningful in case of <see cref="T:Mavidian.DataConveyer.Common.Xrecord" /> subclass; otherwise 0.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ExternalLine.Excerpt">
      <summary>
            Sample contents of the object to help identifying it, e.g. in error messages.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ExternalLine.Items">
      <summary>
            Sequence of key-value pairs representing a record. Only meaningful in case of <see cref="T:Mavidian.DataConveyer.Common.Xrecord" /> subclass; otherwise null (Nothing in Visual Basic).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ExternalLine.Text">
      <summary>
            A single line of text. Only meaningful in case of <see cref="T:Mavidian.DataConveyer.Common.Xtext" /> subclass; otherwise null (Nothing in Visual Basic).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ExternalLine.Type">
      <summary>
            Nature of data that Data Conveyer receives from Intake and sends to Output.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.ExternalLineHelpers">
      <summary>
            Helper methods such as extension methods to assist in translating to/from <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> objects.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.StripIndexNo(System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32})">
      <summary>
            Translate a tuple with an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object to a tuple with the same object and a source or target number of 1. 
            </summary>
      <param name="extTuple">An <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object along with corresponding source or target number.</param>
      <returns>The same <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object along with a source or target number of 1.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalLine(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}})">
      <summary>
            Translate a record expressed as  a sequence of key-value pairs into an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object with an undetermined cluster number.
            </summary>
      <param name="record">A sequence of key-value pairs.</param>
      <returns>An <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object of type <see cref="T:Mavidian.DataConveyer.Common.Xrecord" />.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalLine(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32)">
      <summary>
            Translate a record expressed as a sequence of key-value pairs into an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object.
            </summary>
      <param name="record">A sequence of key-value pairs.</param>
      <param name="clstrNo">Cluster number the record is associated with; may be 0, which means undetermined.</param>
      <returns>An <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object of type <see cref="T:Mavidian.DataConveyer.Common.Xrecord" />.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalLine(System.String)">
      <summary>
            Translate a line of text into an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object.
            </summary>
      <param name="line">A line of text.</param>
      <returns>An <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object of <see cref="T:Mavidian.DataConveyer.Common.Xtext" /> type.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalTuple(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}})">
      <summary>
            Translate a record expressed as a sequence of key-value pairs (where a cluster number is undetermined) into a tuple used by intake suppliers and output consumers in case of a single source or target.
            </summary>
      <param name="record">A sequence of key-value pairs.</param>
      <returns>A tuple consisting of an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object with an undetermined cluster number and a source or target number equal to 1.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalTuple(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32)">
      <summary>
            Translate a record expressed as a sequence of key-value pairs into a tuple used by by intake suppliers and output consumers in case of a single source or target.
            </summary>
      <param name="record">A sequence of key-value pairs.</param>
      <param name="clstrNo">Cluster number of the record; may be 0, which means undetermined.</param>
      <returns>A tuple consisting of an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object and a source or target number equal to 1.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalTuple(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32,System.Int32)">
      <summary>
            Translate a record expressed as a sequence of key-value pairs into a tuple used by intake suppliers and output consumers.
            </summary>
      <param name="record">A sequence of key-value pairs.</param>
      <param name="clstrNo">Cluster number; may be 0, which means undetermined.</param>
      <param name="indexNo">Either source number or target numbe.r</param>
      <returns>A tuple consisting of an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object and a source or target number.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalTuple(System.String)">
      <summary>
            Translate a line of text into a tuple used by intake suppliers and output consumers in case of a single source or target.
            </summary>
      <param name="line">A line of text.</param>
      <returns>A tuple consisting of an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object and a source or target number equal to 1.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalTuple(System.String,System.Int32)">
      <summary>
            Translate a line of text into a tuple used by suppliers and consumers.
            </summary>
      <param name="line">A line of text.</param>
      <param name="indexNo">Either source number or target number.</param>
      <returns>A tuple consisting of an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object and a source or target number.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalTuple(System.Tuple{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32})">
      <summary>
            Translate a tuple with a record (expressed as a sequence of key-value pairs) to a tuple with an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object.
            </summary>
      <param name="recTuple">A tuple consisting of a record expressed as a sequence of key-value pairs and a source or target number.</param>
      <returns>A tuple consisting of an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object and the same source or target number.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToExternalTuple(System.Tuple{System.String,System.Int32})">
      <summary>
            Translate a tuple with a line of text to a tuple with an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object.
            </summary>
      <param name="txtTuple">A tuple consisting of a line of text and a source or target number.</param>
      <returns>A tuple consisting of an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object and the same source or target number.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToRecordTuple(System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32})">
      <summary>
            Translate tuple with an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object to a tuple with a record (expressed as a sequence of key-value pairs).
            The source or output number remains unchanged.
            </summary>
      <param name="extTuple">An <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object along with corresponding source or target number.</param>
      <returns>A tuple with a record or null if parameter is null or tuple with null if parameter does not contain a line of text.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToTextTuple(System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32})">
      <summary>
            Translate a tuple with an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object to a tuple with a line of text.
            The source or output number remains unchanged.
            </summary>
      <param name="extTuple">An <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object along with corresponding source or target number.</param>
      <returns>A tuple with a line of text or null if parameter is null or tuple with null if parameter does not contain a line of text.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToTuple(Mavidian.DataConveyer.Common.ExternalLine)">
      <summary>
            Translate an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object into a tuple used by intake suppliers and output consumers in case of a single source or target.
            </summary>
      <param name="line">An <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object.</param>
      <returns>A tuple consisting of an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object and a source or target number of 1.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToTuple(Mavidian.DataConveyer.Common.ExternalLine,System.Int32)">
      <summary>
            Translate an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object into a tuple used by intake suppliers and output consumers.
            </summary>
      <param name="line">An <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object.</param>
      <param name="indexNo">Either source or target number to assign.</param>
      <returns>A tuple consisting of an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object and a source or target number.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToTuple(System.String)">
      <summary>
            Translate a line of text into a tuple consisting of this line and a source or target number of 1.
            </summary>
      <param name="line">A line of text.</param>
      <returns>A tuple consisting of the same line and a source or target number of 1</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ExternalLineHelpers.ToTuple(System.String,System.Int32)">
      <summary>
            Translate a line of text into a tuple consisting of this line and a corresponding source or target number.
            </summary>
      <param name="line">A line of text</param>
      <param name="indexNo">Either source or target number to assign.</param>
      <returns>A tuple consisting of the same line and a corresponding source or target number.</returns>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.ExternalLineType">
      <summary>
            Defines nature of data that DataConveyer receives from Intake or sends to Output.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ExternalLineType.Xtext">
      <summary>
            A single line of text, i.e. string.
            Applies to textual data kinds, such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ExternalLineType.Xsegment">
      <summary>
            A segment, such as X12 segment (future use; currently Xtext is used instead).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.ExternalLineType.Xrecord">
      <summary>
            A record containing items (key-value pairs) and cluster number.
            Applies to record-centric data, such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> and <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> data kinds.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.KindOfTextData">
      <summary>
            Type (format) of text data to process (data lines are strings separated by CR/LF).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.Raw">
      <summary>
            This is the default data kind where data is not parsed or formatted.
            On intake, the entire row contents is extracted into a single field named "RAW_REC".
            On output, if multiple fields are encountered, they are simply spliced together.
            
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.Keyword">
      <summary>
            Keyword data, i.e. key-value pairs.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited">
      <summary>
            Values delimited by a given character, such as comma separated values.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat">
      <summary>
            Flat data, i.e. fixed width fields.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.Arbitrary">
      <summary>
            Text data with fields "cherry-picked" using arbitrary formulas.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.XML">
      <summary>
            XML data. 
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON">
      <summary>
             JSON data.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.X12">
      <summary>
            An X12 document (EDI).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.HL7">
      <summary>
            HL7 v2.x message(s) (future use).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.KindOfTextData.Ultimate">
      <summary>
            Text data that uses supplied functions to convert to/from canonical format (future use).
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.Phase">
      <summary>
            Phase of the Data Conveyer process execution.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.Phase.Intake">
      <summary>
            Extract (E) phase of the ETL process - reading data from the sources.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.Phase.Transformation">
      <summary>
            Transform (T) phase of the ETL process - data translation.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.Phase.Output">
      <summary>
            Load (L) phase of the ETL process - writing data to the targets.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.ProductInfo">
      <summary>
            Provides information on this version of Data Conveyer.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ProductInfo.Copyright">
      <summary>
            Copyright notice.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ProductInfo.CurrentInfo">
      <summary>
            Current instance of Data Conveyer information.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ProductInfo.Date">
      <summary>
            Date and Time Data Conveyer was built.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ProductInfo.FileVersion">
      <summary>
            FileVersion of DataConveyer assembly (major.minor.build.revision).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ProductInfo.Name">
      <summary>
            Name of the component, i.e. DataConveyer.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ProductInfo.Target">
      <summary>
            .NET target Data Conveyer was built for.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.ProductInfo.ToString">
      <summary>
            Return a string representation of the Data Conveyer version.
            </summary>
      <returns>E.g. DataConveyer v2.6 for NetStandard2.0 (build 2.6.3.15683 from 03-15-2019 at 10:47:24 AM)...</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.ProductInfo.Version">
      <summary>
            Version of DataConveyer assembly (major.minor portion of AssemblyVerion).
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.PropertyBinAttachedTo">
      <summary>
            Flags defining entities that the property bin objects are attached to.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.PropertyBinAttachedTo.Nothing">
      <summary>
            No property bins in use.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.PropertyBinAttachedTo.Records">
      <summary>
            Property bin attached to every record.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.PropertyBinAttachedTo.Clusters">
      <summary>
            Property bin attached to every cluster.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.QuotationMode">
      <summary>
            Specifies which values are to be surrounded with quotes on output. 
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.QuotationMode.OnlyIfNeeded">
      <summary>
            Output values are not quoted, except for those that contain commas or quotes.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.QuotationMode.StringsAndDates">
      <summary>
            String and date values are quoted on output, while decimal or integer values are not (except if formatted to contain commas).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.QuotationMode.Always">
      <summary>
            All values are surrounded with quotes on output.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.RouterType">
      <summary>
            Type of router that determines the output target.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.RouterType.SingleTarget">
      <summary>
            All records are routed to the first output target (TargetNo = 1).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.RouterType.SourceToTarget">
      <summary>
            Each record is routed to the target that corresponds to the record's source (TargetNo = SourceNo).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.RouterType.PerCluster">
      <summary>
            All records in a cluster are routed to the same output target based on the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterRouter" /> function.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.RouterType.PerRecord">
      <summary>
            Each record is routed individually based on the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordRouter" /> function.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.TransformerType">
      <summary>
            Type of transformer to be invoked during Transform phase.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.TransformerType.Universal">
      <summary>
            Each input cluster gets transformed into a sequence of output clusters (1: 0..many) based on the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.UniversalTransformer" /> function.
            
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.TransformerType.Clusterbound">
      <summary>
            Each input cluster gets transformed into a single output cluster (1:1) based on the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterboundTransformer" /> function.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.TransformerType.Recordbound">
      <summary>
            Every record in each input cluster gets transformed into a corresponding record in output cluster (1:1) based on the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordboundTransformer" /> function.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.TransformerType.ClusterFilter">
      <summary>
            No transformation, but each input cluster may be removed from output (1:0..1)  based on the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterFilterPredicate" /> function.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.TransformerType.RecordFilter">
      <summary>
            No transformation, but every record in each input cluster may be removed from output (1:0..1) based on the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordboundTransformer" /> function.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Common.TransformerType.Aggregator">
      <summary>
            No transformation; instead, clusters are merged (reduced) into an aggregated cluster (1:1)   (future use).
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.Xrecord">
      <summary>
            One of the forms (derived classes) of the <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> type.
            Represents record-like data sent into or out of Data Conveyer.
            Applicable to <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> and <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> data kinds.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.Xrecord.ClstrNo">
      <summary>
            Cluster number associated with the record; 0 means undetermined.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.Xrecord.Excerpt">
      <summary>
            First item in a form key=value
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.Xrecord.Items">
      <summary>
            A sequence of key-value pairs, each pair defining a single element (field) of the record; both key and value are strings.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.Xsegment">
      <summary>
            One of the forms (derived types) of the <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> type.
            Intended to represent X12 segment (future use, currently <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.X12" /> data kind is represented by <see cref="T:Mavidian.DataConveyer.Common.Xtext" /> type).
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Common.Xsegment.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Mavidian.DataConveyer.Common.Xsegment</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Common.Xtext">
      <summary>
            One of the forms (derived types) of the <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> type.
            Represents a single line of text sent into or out of the DataConveyer.
            Applicable to textual data kinds, such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.Xtext.Excerpt">
      <summary>
            First 15 chars except for leading whitespace
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Common.Xtext.Text">
      <summary>
            A single line of text.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Entities.KeyVal.ICluster">
      <summary>
            Interface defining a record cluster
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.ICluster.AddRecord(Mavidian.DataConveyer.Entities.KeyVal.IRecord)">
      <summary>
            Add a given record at the end of the cluster.
            </summary>
      <param name="record">Record to add, which must originate from the cluster or its ancestor.</param>
      <returns>true if record successfully added, false if not (record rejected).</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.ClstrNo">
      <summary>
            Sequence number of the cluster on intake (1 based).  This number remains unchanged throughout the processing; for example in case of cluster cloning, the clone will inherit ClstrNo from the original cluster.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.Count">
      <summary>
            Number of records contained in the cluster.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.ICluster.GetClone">
      <summary>
            Return a copy (deep clone) of the cluster.
            The cloned cluster will have the same characteristics (e.g. ClstrNo and PropertyBin) as the current cluster.
            </summary>
      <returns>An cluster containing (copies of) the same records as in the current cluster.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.ICluster.GetEmptyClone">
      <summary>
            Return an empty cluster, i.e. cluster with no records, but the same characteristics (e.g. ClstrNo and PropertyBin) as the current cluster.
            </summary>
      <returns>An empty cluster (with no records).</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.ICluster.GetProcessingStatus(Mavidian.DataConveyer.Common.Phase,System.Int32)">
      <summary>
            Return processing status of a given phase.
            </summary>
      <param name="phase">One of: Intake, Transformation or Output.</param>
      <param name="transformerNo">Transformer number (0-based); optional, if omitted, then 0, i.e. first transformer assumed ; irrelevant in case of Intake or Output.</param>
      <returns>Immutable PhaseStatus object that describes the current status of processing or a given phase.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.ICluster.GetRecord(System.Int32)">
      <summary>
            Return a record at a specified index position.
            </summary>
      <param name="index">Position of record to get (0-based).</param>
      <returns>Record at a given index or null if index out of range.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.GlobalCache">
      <summary>
            A set of key value pairs that are common to all records and clusters throughout the process execution.
            Elements of global cache are defined via the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.GlobalCacheElements" /> setting.
            Global cache also allows signals to synchronize thread of Data Conveyer processing.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.Item(System.Int32)">
      <summary>
            A record at a specified index position (0-based).
            </summary>
      <param name="index">Position of the record (0-based).</param>
      <returns></returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.ICluster.ObtainEmptyRecord">
      <summary>
            Return an empty record (template) that is suitable to be contained in the current cluster.
            <note type="caution">
            This method should only be used in case of an empty cluster, such as a head cluster.
            Otherwise, one of the records contained in the cluster should be cloned instead. 
            </note></summary>
      <returns>An empty record that matches characteristics of current cluster.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.PropertyBin">
      <summary>
            The property bin associated with the cluster.
            Property bin is a dictionary containing arbitrary set of key value pairs that can be added and removed throughout of DataConveyer processing.
            In order to have clusters contain property bin objects, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.PropertyBinEntities" /> setting must contain the Clusters flag;
            otherwise the property bin will be null.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.Records">
      <summary>
            A collection of records contained in the cluster.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.ICluster.RemoveRecord(System.Int32)">
      <summary>
            Remove record at a specified index position from the cluster.
            </summary>
      <param name="index">Position of the record to remove (0-based)</param>
      <returns>true if removed, false if not (index out of range).</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.StartRecNo">
      <summary>
            Sequence number of the first record in cluster on intake (1 based).
            This number remains unchanged throughout the processing; for example in case of cluster cloning, the clone will inherit StartRecNo from the original cluster.
            There are 2 special values: 0 (<see cref="F:Mavidian.DataConveyer.Common.Constants.HeadClusterRecNo" />) means head cluster and -1 (<see cref="F:Mavidian.DataConveyer.Common.Constants.FootClusterRecNo" />) means foot cluster.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.StartSourceNo">
      <summary>
            Index number (1 based) of the intake source that supplied the first record of the cluster.
            This number remains unchanged throughout the processing; for example in case of record cloning, the clone will inherit SourceNo from the original cluster.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Entities.KeyVal.IItem">
      <summary>
            Interface defining an item: a strongly typed key value pair
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IItem.ItemDef">
      <summary>
            Type of the value stored in the item.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IItem.Key">
      <summary>
            The key, the same as the field name.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IItem.StringValue">
      <summary>
            String representation of the value.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IItem.Value">
      <summary>
            The value (strongly typed).
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Entities.KeyVal.IRecord">
      <summary>
            Interface defining a record; it refers to strongly typed values of items contained in the record
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecord.AddItem(System.String,System.Object)">
      <summary>
            Add an item for a given key and value at the end of the record.
            </summary>
      <param name="key">The key of an item to add.</param>
      <param name="value">The value of an item to add.</param>
      <returns>The item just added or void item if key already existed (and thus no item was added); if item was not added because additions/removals are disallowed return null.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecord.CreateEmptyX12Segment(System.String,System.Int32)">
      <summary>
            Return an empty X12 segment for a given name and number of elements.
            </summary>
      <param name="name">Segment type (name), e.g. NM1.</param>
      <param name="elementCount">Number of elements in the segment (each element is assigned an empty string value).</param>
      <returns>An empty record (with the same RecNo as on current record) representing X12 segment.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecord.CreateFilledX12Segment(System.String,System.Char)">
      <summary>
            Return an X12 segment based on provided contents.
            </summary>
      <param name="contents">Contents of the entire segment with field delimiter between fields, but no segment delimiter at end.</param>
      <param name="fieldDelimiter">Field delimiter character used in contents; if omitted DefaultX12Field delimiter is used if any; otherwise * is assumed.</param>
      <returns>A record (with the same RecNo as on current record) representing the X12 segment.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecord.GetClone">
      <summary>
            Return a copy (deep clone) of the record.
            The cloned record will have the same characteristics (e.g. RecNo and also TraceBin and PropertyBin) as the current record.
            </summary>
      <returns>A clone of the current record.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecord.GetEmptyClone">
      <summary>
        <para>
            Return an empty record (i.e. record with no items) with the same characteristics (e.g. RecNo and also TraceBin and PropertyBin) as the current record.
            </para>
        <note type="caution">
            GetEmptyClone method typically requires AllowTransformToAlterFields setting to be true (to allow field additions).
            Otherwise (i.e. when AllowTransformToAlterFields is false, which is a default value), the record returned by this method is unmaintainable, i.e. it will remain empty forever.
            </note>
      </summary>
      <returns>An empty record (with no items).</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecord.GetItemClone(Mavidian.DataConveyer.Entities.KeyVal.IItem,System.Object)">
      <summary>
            Obtain a clone of a given item with a new value.
            </summary>
      <param name="item">An item to clone.</param>
      <param name="value">New value for the item.</param>
      <returns>An item with the same key and a new value; if a void item is passed, then void item is returned.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecord.Item(System.Int32)">
      <summary>
            A value of an item at a specified index position.
            (attempt to set a value of a non-existing item has no effect)
            </summary>
      <param name="index">Index position of the item.</param>
      <returns>A typed item value or null if index is out of range.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecord.Item(System.String)">
      <summary>
            A value of an item for a specified key.
            (attempt to set a value of a non-existing item has no effect)
            </summary>
      <param name="key">Key of the item</param>
      <returns>A typed item value or null if item does not exists.</returns>
    </member>
    <member name="T:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase">
      <summary>
            Base interface for IRecord and IUntypedRecord interfaces
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.AddOrReplaceItem(Mavidian.DataConveyer.Entities.KeyVal.IItem)">
      <summary>
            Include the item in the record by either adding it or replacing existing item with the same key.
            </summary>
      <param name="item">A new item (to replace the existing item for the same key).</param>
      <returns>True if an item with the same key existed before (item has been replaced); otherwise return false if item has been added or null if item has not been added because additions/removals are disallowed.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.ClstrNo">
      <summary>
            1-based sequential cluster number (on intake it is 0 (undetermined), unless assigned in case of XML intake); the actual number is assigned at clustering block.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.ContainsKey(System.String)">
      <summary>
            Verify if the record contains an item with a given key.
            </summary>
      <param name="key">Key to verify</param>
      <returns>True if the record contains an item with the specified key; otherwise false.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.Count">
      <summary>
            Number of items contained in the record
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.GetItem(System.Int32)">
      <summary>
            Obtain an item at a specified index position.
            </summary>
      <param name="index">Index position of the item to obtain (0-based).</param>
      <returns>The item at a specified index position or a void item if index is out of range.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.GetItem(System.String)">
      <summary>
            Obtain an item for a specified key.
            </summary>
      <param name="key">Key of an item to obtain.</param>
      <returns>The item for a specified key or a void item if no such item exist.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.GetProcessingStatus(Mavidian.DataConveyer.Common.Phase,System.Int32)">
      <summary>
            Return processing status of a given phase.
            </summary>
      <param name="phase">One of: Intake, Transformation or Output.</param>
      <param name="transformerNo">Transformer number (0-based); optional, if omitted, then 0, i.e. first transformer assumed ; irrelevant in case of Intake or Output.</param>
      <returns>Immutable PhaseStatus object that describes the current status of processing or a given phase.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.GlobalCache">
      <summary>
            A set of key value pairs that are common to all records and clusters throughout the process execution.
            Elements of global cache are defined via the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.GlobalCacheElements" /> seting.
            Global cache also allows signals to synchronize thread of Data Conveyer processing.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.Items">
      <summary>
             A collection of items contained in the record.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.Keys">
      <summary>
            A collection of keys contained in the record.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.PropertyBin">
      <summary>
            The property bin associated with the record.
            Property bin is a dictionary containing arbitrary set of key value pairs that can be added and removed throughout of DataConveyer processing.
            In order to have records contain property bin objects, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.PropertyBinEntities" /> setting must contain the Records flag;
            otherwise the property bin will be null.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.RecNo">
      <summary>
            Sequence number of the record on intake (1 based).  This number remains unchanged throughout the processing; for example in case of record cloning, the clone will inherit RecNo from the original record.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.RemoveItem(System.String)">
      <summary>
            Remove item for a specified key.
            </summary>
      <param name="key">Key of an item to remove</param>
      <returns>True if the item was successfully removed; false item not found, null if item additions/removals are disallowed.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.ReplaceItem(Mavidian.DataConveyer.Entities.KeyVal.IItem)">
      <summary>
            Replace an existing item with a new one.
            </summary>
      <param name="item">A new item (to replace the existing item for the same key).</param>
      <returns>True if the item was successfully replaced; otherwise (key not found in record) false.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.SourceNo">
      <summary>
            Index number of the intake source that supplied the record (1 based).  This number remains unchanged throughout the processing; for example in case of record cloning, the clone will inherit SourceNo from the original record.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.TargetNo">
      <summary>
            Index number of the output target that the record is sent to (1 based). Before output phase (ClusterRouter function), the value is 0, which means not yet determined.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IRecordBase.TraceBin">
      <summary>
            The trace bin object associated with the record. It can be set up in the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordInitiator" /> function.
            Trace bin is a dictionary intended to contain key value pairs collected during processing of preceding records on intake.
            Note that for efficiency empty trace bin objects are not attached; in such cases, TraceBin values are null.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Entities.KeyVal.ItemDef">
      <summary>
            Defines characteristics of an item.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.ItemDef.#ctor(Mavidian.DataConveyer.Entities.KeyVal.ItemType,System.String)">
      <summary>
            Constructs the item type definition for a given type and format.
            </summary>
      <param name="type">Type of the item to construct</param>
      <param name="format">Format of the item to construct</param>
    </member>
    <member name="F:Mavidian.DataConveyer.Entities.KeyVal.ItemDef.Format">
      <summary>
            Output format string (the same as used in Format statement).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Entities.KeyVal.ItemDef.Type">
      <summary>
            Item type, one of: Bool, Int, Decimal, DateTime or String.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Entities.KeyVal.ItemType">
      <summary>
            Possible data types of item values.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Entities.KeyVal.ItemType.Void">
      <summary>
            Represents a non-existent item, never assigned to an actual item.
            This type may be present in fixed size records, e.g. in case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" /> data.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Entities.KeyVal.ItemType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Entities.KeyVal.ItemType.Bool">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Entities.KeyVal.ItemType.Int">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Entities.KeyVal.ItemType.Decimal">
      <summary>
            Decimal type (money).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Entities.KeyVal.ItemType.DateTime">
      <summary>
            Date type.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Entities.KeyVal.ITypedItem`1">
      <summary>
            Interface defining an item with a value of a specific type
            </summary>
      <typeparam name="TVal">Type of the item</typeparam>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.ITypedItem`1.Value">
      <summary>
            Strongly typed value of the actual type of the item
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Entities.KeyVal.IUntypedRecord">
      <summary>
            Interface defining a record; it refers to string representations of items contained in the record
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IUntypedRecord.AddItem(System.String,System.String)">
      <summary>
            Add an item for a given key and value at the end of the record
            </summary>
      <param name="key">The key of an item to add</param>
      <param name="value">The value of an item to add</param>
      <returns>The item just added or void item if key already existed (and thus no item was added); if item was not added because additions/removals are disallowed return null.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IUntypedRecord.CreateEmptyX12Segment(System.String,System.Int32)">
      <summary>
            Return an empty X12 segment for a given name and number of elements.
            </summary>
      <param name="name">Segment type (name), e.g. NM1.</param>
      <param name="elementCount">Number of elements in the segment.</param>
      <returns>An empty record representing X12 segment.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IUntypedRecord.CreateFilledX12Segment(System.String,System.Char)">
      <summary>
            Return an X12 segment based on provided contents.
            </summary>
      <param name="contents">Contents of the entire segment with field delimiter between fields, but no segment delimiter at end.</param>
      <param name="fieldDelimiter">Field delimiter character used in contents; if omitted DefaultX12Field delimiter is used if any; otherwise * is assumed.</param>
      <returns>A record (with the same RecNo as on current record) representing the X12 segment.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IUntypedRecord.GetClone">
      <summary>
            Return a copy (deep clone) of current record.
            The cloned record will have the same characteristics (e.g. RecNo and also TraceBin and PropertyBin) as the current record.
            </summary>
      <returns>A clone of the current record</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IUntypedRecord.GetEmptyClone">
      <summary>
        <para>
            Return an empty record (i.e. record with no items) with the same characteristics (e.g. RecNo and also TraceBin and PropertyBin) as the current record.
            </para>
        <note type="caution">
            GetEmptyClone method typically requires AllowTransformToAlterFields setting to be true (to allow field additions).
            Otherwise (i.e. when AllowTransformToAlterFields is false, which is a default value), the record returned by this method is unmaintainable, i.e. it will remain empty forever.
            </note>
      </summary>
      <returns>An empty record (with no items).</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Entities.KeyVal.IUntypedRecord.GetItemClone(Mavidian.DataConveyer.Entities.KeyVal.IItem,System.String)">
      <summary>
            Obtain a clone of a given item with a new value.
            </summary>
      <param name="item">An item to clone</param>
      <param name="value">New value for the item</param>
      <returns>An item with the same key and a new value; if a void item is passed, then void item is returned</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IUntypedRecord.Item(System.Int32)">
      <summary>
            A value of an item at a specified index position
            (attempt to set a value of a non-existing item has no effect)
            </summary>
      <param name="index">Index position of the item</param>
      <returns>A typed item value or null if index is out of range</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Entities.KeyVal.IUntypedRecord.Item(System.String)">
      <summary>
            A value of an item for a specified key
            (attempt to set a value of a non-existing item has no effect)
            </summary>
      <param name="key">Key of the item</param>
      <returns>A typed item value or null if item does not exists</returns>
    </member>
    <member name="T:Mavidian.DataConveyer.Logging.FileLogger">
      <summary>
            A simple logger that sends log entries to a text file.
            It operates in append mode (prior contents of the log file is preserved).
            It needs exclusive access to the file, so no concurrent access is allowed.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Logging.FileLogger.Dispose">
      <summary>
            Dispose the underlying text writer.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Logging.FileLogger.Log(Mavidian.DataConveyer.Logging.LogEntry)">
      <summary>
            Send the log entry to a text file (log file).
            </summary>
      <param name="entry">Log entry to send.</param>
    </member>
    <member name="P:Mavidian.DataConveyer.Logging.FileLogger.LogDescription">
      <summary>
            Description of the process being logged; placed in the logger header.
            May be helpful in distinguishing between differenet entries place in the same log.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Logging.FileLogger.LoggerType">
      <summary>
            Type of the logger, i.e. <see cref="F:Mavidian.DataConveyer.Logging.LoggerType.LogFile" />.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Logging.FileLogger.LoggingThreshold">
      <summary>
            The least severe severity level to be logged.
            If not assigned during logger construction, a level of <see cref="F:Mavidian.DataConveyer.Logging.LogEntrySeverity.None" /> will be assumed (i.e. no entries will be logged).
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Logging.ILogger">
      <summary>
            Logging facade to be implemented by the actual logger, e.g. NLog.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Logging.ILogger.Log(Mavidian.DataConveyer.Logging.LogEntry)">
      <summary>
            Log a given log entry.
            </summary>
      <param name="entry">Log entry to process (the entry.MessageOnDemand() will evaluate the actual message to report).</param>
    </member>
    <member name="P:Mavidian.DataConveyer.Logging.ILogger.LogDescription">
      <summary>
            Description of the process being logged; placed in the logger header.
            May be helpful in distinguishing between differenet entries place in the same log.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Logging.ILogger.LoggerType">
      <summary>
            Type of the logger.
            In case of problems creating the logger of given type, <see cref="F:Mavidian.DataConveyer.Logging.LoggerType.Null" /> logger is assumed.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Logging.ILogger.LoggingThreshold">
      <summary>
            The least severe severity level of log entries to be logged.  One of:
            <list type="bullet"><item><term>None</term><description>No log entries will be logged at all (default)</description></item><item><term>Fatal</term><description>Only fatal errors, i.e. those that caused process to halt will be logged</description></item><item><term>Error</term><description>All errors, either fatal or those that allowed process continuation (upon skipping some data) will be logged</description></item><item><term>Warning</term><description>In addition to errors, all warnings (scenarios where Data Conveyer was able to repair unexpected data) will be logged</description></item><item><term>Information</term><description>All log entries: errors, warnings and informational messages will be logged (except verbose debug messages intended for troubleshooting purposes)</description></item><item><term>Debug</term><description>All possible log entries will be logged</description></item></list>
            If not specified during logger construction, a level of <see cref="F:Mavidian.DataConveyer.Logging.LogEntrySeverity.None" /> will be assumed (i.e. no entries will be logged).
            See also <see cref="T:Mavidian.DataConveyer.Logging.LogEntrySeverity" />.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Logging.LogEntry">
      <summary>
            Entry to be placed on a log.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Logging.LogEntrySeverity">
      <summary>
            Type/level of the log entry (the higher value, the less severe message).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Logging.LogEntrySeverity.None">
      <summary>
            Indicates that no log entries are reported.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Logging.LogEntrySeverity.Fatal">
      <summary>
            Process aborted, e.g. input file not found.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Logging.LogEntrySeverity.Error">
      <summary>
            Some data skipped, e.g. input record rejected due to dup key.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Logging.LogEntrySeverity.Warning">
      <summary>
            Some condition repaired, e.g. dup key replaced by a default key.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Logging.LogEntrySeverity.Information">
      <summary>
            No impact on processing, e.g. total records processed.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Logging.LogEntrySeverity.Debug">
      <summary>
            Verbose message used for troubleshooting purposes.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Logging.LoggerCreator">
      <summary>
            A factory class to create logger instances.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Logging.LoggerCreator.CreateLogger(Mavidian.DataConveyer.Logging.LoggerType,System.String,Mavidian.DataConveyer.Logging.LogEntrySeverity,System.String)">
      <summary>
            A factory method to create a logger instance.
            </summary>
      <param name="loggerType">Type of the logger to be created. If not specified, <see cref="F:Mavidian.DataConveyer.Logging.LoggerType.Null" /> logger is assumed</param>
      <param name="logDescription">Description of the process being logged to be placed in the logger header.</param>
      <param name="loggingThreshold">The least severe severity level to be logged. If not specified, severity level of <see cref="F:Mavidian.DataConveyer.Logging.LogEntrySeverity.None" /> is assumed.</param>
      <param name="loggerInfo">Additional information required to initialize the logger; specific to a particular logger type. In case of a <see cref="F:Mavidian.DataConveyer.Logging.LoggerType.LogFile" /> logger, it is a path to the log file (if LogFile path absent, then DataConveyer.log file in the current folder will be assumed).</param>
      <returns>The newly created logger instance.</returns>
    </member>
    <member name="T:Mavidian.DataConveyer.Logging.LoggerType">
      <summary>
            Type of the logger to process the log entries
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Logging.LoggerType.Null">
      <summary>
            Logger that actually disregards log entries (default)
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Logging.LoggerType.LogFile">
      <summary>
            Logger that sends (appends) entries as text to a log file
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Logging.LoggerType.NLog">
      <summary>
            Logger using the NLog logging framework (future use)
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.CompletionStatus">
      <summary>
            Possible reasons for completion of process execution.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.IntakeDepleted">
      <summary>
            The process completed successfully by exhausting intake data (e.g. end of input file reached).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.LimitReached">
      <summary>
            The process terminated upon processing the maximum number of intake records allowed (specified in the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeRecordLimit" /> setting).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Canceled">
      <summary>
            The process was canceled by an external source (a call to <see cref="M:Mavidian.DataConveyer.Orchestrators.IOrchestrator.CancelExecution" /> method).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.TimedOut">
      <summary>
            Execution time exceeded the maximum time allowed (specified in the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TimeLimit" /> setting).
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.InitializationError">
      <summary>
            The process could not start due to an error during initialization of the core process orchestration. For example, the input file was not found.
            Details can be available in log data.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.InvalidAttempt">
      <summary>
            The process could not start as the <see cref="M:Mavidian.DataConveyer.Orchestrators.IOrchestrator.ExecuteAsync" /> method call was attempted in an invalid context,
            such as after prior execution or on disposed orchestrator object.
            </summary>
    </member>
    <member name="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed">
      <summary>
            An irrecoverable error occurred during processing. For example, an exception thrown by a caller supplied code.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.ErrorEventArgs">
      <summary>
            Arguments for ErrorOccurred event
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ErrorEventArgs.Context">
      <summary>
            Additional information about the error context, e.g. " at line #2"
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ErrorEventArgs.Exception">
      <summary>
             Unhandled exception that caused the error
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ErrorEventArgs.GlobalCache">
      <summary>
            A set of key value pairs that are common to all records and clusters throughout the process execution.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ErrorEventArgs.Origin">
      <summary>
            Stage of the Data Conveyer process where the error occurred, e.g. "line parsing block"
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache">
      <summary>
        <para>
            Interface that defines a GlobalCache, a thread-safe repository of key value pairs to contain global data and signals to
            synchronize multi-threaded processing.
            GlobalCache elements are available throughout all phases of Data Conveyer processing.
            Element keys are of type string, values can be one of: int, DataTime, decimal, string or object.
            </para>
        <para>
            GlobalCache elements must be defined using <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.GlobalCacheElements" /> configuration setting.
            During the process execution, element values can be updated, but no elements can be added/removed.
            </para>
        <para>
            Signals, unlike elements, do not need to be declared; instead they are simply referred to in <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.RaiseSignal(System.String)" />,
            <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitSignal(System.String)" />and <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitSignalAsync(System.String)" /> methods.
            </para>
        <note type="caution">
            GlobalCache is exposed to concurrent access by multiple threads and therefore updates to its elements
            (such as <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.TryReplace(System.String,System.Object,System.Object)">TryReplace</see> method) must be performed in a thread-safe manner.
            Data Conveyer makes no guarantees regarding a particular processing order. As a consequence, user code may need
            to address possible race conditions, for example by using <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitCondition(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Boolean})" /> method.
            </note>
      </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitCondition(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Boolean})">
      <summary>
            Wait for a given condition to be satisfied before returning. This method blocks the current thread until the provided function evaluates
            to true. Therefore, special care must be taken when defining the function (condition parameter) to avoid a deadlock condition.
            </summary>
      <param name="condition">A predicate expected to return true once the condition is met.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitConditionAsync(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Boolean})">
      <summary>
            Asynchronously wait for a given condition to be satisfied. The returned task will not complete until the provided function evaluates
            to true. When called from an asynchronous method, this method allows synchronization of DataConveyer processing without thread blocking.
            </summary>
      <param name="condition">A predicate expected to return true once the condition is met.</param>
      <returns>A task intended to be awaited for in the client code.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitSignal(System.String)">
      <summary>
            Wait for a given signal to be raised before returning. This method blocks the current thread until the given signal is raised.
            Therefore, special care must be taken to assure that the <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.RaiseSignal(System.String)" /> method is called on another thread, so that
            a deadlock condition is avoided.
            </summary>
      <param name="signal">Name of the signal to await.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitSignalAsync(System.String)">
      <summary>
            Asynchronously wait for a given signal to be raised. The returned task will not complete until the given signal is raised using the
            <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.RaiseSignal(System.String)" /> method. When called from an asynchronous method, this method allows synchronization of DataConveyer processing
            without thread blocking.
            </summary>
      <param name="signal">Name of the signal to await.</param>
      <returns>A task intended to be awaited for in the client code.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.IGlobalCache.Count">
      <summary>
            Number of elements held. This value remains constant throughout execution of Data Conveyer process.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.IGlobalCache.Elements">
      <summary>
            A collection of all elements held.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.IncrementValue(System.String)">
      <summary>
            Add 1 to an integer value held in GlobalCache. This method is thread-safe.
            </summary>
      <param name="key">Key of the value to increment by 1.</param>
      <returns>New (incremented) value.</returns>
      <exception cref="T:System.ArgumentException">Element for a given key does not exist or is of type other than int.</exception>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.IncrementValue(System.String,System.Int32)">
      <summary>
            Add a given number to an integer value held in GlobalCache. This method is thread-safe.
            </summary>
      <param name="key">Key of the value to increment.</param>
      <param name="increment">Value to increment by.</param>
      <returns>New (incremented) value.</returns>
      <exception cref="T:System.ArgumentException">Element for a given key does not exist or is of type other than int.</exception>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.IGlobalCache.Item(System.String)">
      <summary>
            Retrieve the current value for a given key.
            </summary>
      <param name="key">Key of the value to retrieve.</param>
      <returns>Current value for a given key.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">No element for a given key is present in GlobalCache.</exception>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.RaiseSignal(System.String)">
      <summary>
            Raise a signal that another part (thread) of DataConveyer process might be waiting for. Once this method is called, any method held by
            either the <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitSignal(System.String)" /> or <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitSignalAsync(System.String)" /> method will continue execution.
            </summary>
      <param name="signal">Name of the signal to raise.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.ReplaceValue``2(System.String,System.Func{``0,``1})">
      <summary>
            Replace value for a given key based on a given calculation formula.
            </summary>
      <param name="key">Key of the value to replace.</param>
      <param name="formula">Function to calculate a new value from the old value.</param>
      <typeparam name="TIn">Type of the value to replace (i.e. the old value).</typeparam>
      <typeparam name="TOut">Type of the replacement value (i.e. the new value).</typeparam>
      <returns>New value that replaced the old value.</returns>
      <exception cref="T:System.ArgumentException">Element for a given key does not exist or is of type other than TIn.</exception>
      <exception cref="T:System.InvalidOperationException">Formula threw exception during calculation; see InnerException for details.</exception>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.TryGet(System.String,System.Object@)">
      <summary>
            Attempt to retrieve the current value for a given key.
            </summary>
      <param name="key">Key of the value to retrieve.</param>
      <param name="value">Retrieved value.</param>
      <returns>True if the value was retrieved; false if the key is not present in GlobalCache.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.TryReplace(System.String,System.Object,System.Object)">
      <summary>
            Attempt to replace the value for a given key. This method is thread-safe.
            Note that there is no guarantee that any call to <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.TryReplace(System.String,System.Object,System.Object)">TryReplace</see> method will succeed; it will fail (return false) if another thread changed the underlying value (oldValue).
            To guarantee a successful replacement, <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.TryGet(System.String,System.Object@)">TryGet</see> and <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.TryReplace(System.String,System.Object,System.Object)">TryReplace</see> methods need to be called in a loop until <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.TryReplace(System.String,System.Object,System.Object)">TryReplace</see> returns true.
            Alternatively, <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.ReplaceValue``2(System.String,System.Func{``0,``1})">ReplaceValue</see> method may be called, which executes such loop internally.
            </summary>
      <param name="key">Key of the value to replace.</param>
      <param name="newValue">New value to be placed in GlobalCache for the key.</param>
      <param name="oldValue">Current value for the key (to be compared against the underlying value in GlobalCache).</param>
      <returns>True if the value was successfully replaced; false if the oldValue didn't match the underlying value in GlobalCache and hence no replacement took place.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">No element for a given key is present in GlobalCache.</exception>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.IOrchestrator">
      <summary>
            Interface defining members of the pipeline orchestrator.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IOrchestrator.CancelExecution">
      <summary>
            Aborts execution in progress, if any.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.IOrchestrator.ExecuteAsync">
      <summary>
            Executes the orchestrated pipeline asynchronously.
            </summary>
      <returns>A task containing processing results.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.IOrchestrator.InitErrorOccurred">
      <summary>
            Outcome of initializations that occur at start of the ExecuteAsync method, such as opening intake sources and output targets.
            False denotes successful completion of initializations.
            True means a failure, in which case ExecuteAsync method will always result in CompletionStatus.InitializationError.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig">
      <summary>
            Configuration settings to be used by <see cref="T:Mavidian.DataConveyer.Orchestrators.OrchestratorCreator" /> when constructing an orchestrator
            instance, i.e an object that implements the <see cref="T:Mavidian.DataConveyer.Orchestrators.IOrchestrator" /> interface.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.#ctor">
      <summary>
            Creates an instance of the configuration object with default initial values and no logging.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.#ctor(Mavidian.DataConveyer.Logging.ILogger)">
      <summary>
            Creates an instance of the configuration object with default initial values.
            </summary>
      <param name="logger">Logger to be used to process log entries generated by Data Conveyer, such as warnings or errors.</param>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ActionOnDuplicateKey">
      <summary>
            Action to take in case the key is repeated on a single record: IgnoreItem, ExcludeRecord or AssignDefaultKey. Default action is IgnoreItem.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AllowOnTheFlyInputFields">
      <summary>
            False (default) means no new fields beyond those defined in <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFields" /> (or 1st row if applicable) are allowed.  Any additional fields encountered during intake processing will be excluded.
            True means that new fields can be added on the fly in subsequent data records; their names and types are determined according to standard rules.
            In case of Keyword data, default setting (false) requires all fields (keys) to be listed in the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFields" /> setting (keys not listed there will be excluded, so in absence of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFields" /> no fields will be present).
            True setting allows inclusion of all fields for Keyword data.
            This setting is ignored in case of the following data kinds on intake:
            <list type="bullet"><item><term>Flat</term><description>Flat data fields are determined up-front from either <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFields" /> setting or the first row.</description></item><item><term>Arbitrary</term><description>Arbitrary data can only be determined from the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ArbitraryInputDefs" /> setting.</description></item><item><term>X12</term><description>In case of X12 data, fields are added dynamically from X12 segments, so that this setting is assumed to be true.</description></item></list></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AllowTransformToAlterFields">
      <summary>
            If true, fields (items) can be added to and removed from records during transformations.
            If false (default), no fields can be added/removed during transformations (although field values can still be update and records/clusters can be cloned).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AppendFootCluster">
      <summary>
            True causes Data Conveyer to add an extra empty cluster (so called foot cluster) after the last cluster formed from intake records.
            False (default) means no foot cluster will be added at the end of intake.
            The foot cluster always has a <see cref="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.StartRecNo" /> of -1 (<see cref="F:Mavidian.DataConveyer.Common.Constants.FootClusterRecNo" />) and <see cref="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.StartSourceNo" /> of 1. If trailer contents is present, it will follow the foot cluster on output.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ArbitraryInputDefs">
      <summary>
            Array of elements that define fields to be extracted from input lines.
            Each element is a string consisting of 2 parts separated by a space: a field name followed by a regular expression containing formula to extract a value from input line.
            Data Conveyer will extract the fields in the order they are specified in this setting.
            This setting is mandatory for <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> of Arbitrary; if specified for other data kinds, it is ignored.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ArbitraryOutputDefs">
      <summary>
            Array of strings that define data to be placed in output lines.
            Each string contains a fragment of output line and may contain a single token in a form of {field}, where
            such token will be substituted in the output record by the actual value of the field.
            In order to include brace characters in the output, they need to be escaped (preceded by a backslash), like so: \{ and \}.
            Note though that backslash characters inside C# string literals may need to be escaped themselves.
            For example: "\\{ "Format":"JSON" \\}" or @"\{ "Format":"JSON" \}" will both output identical JSON string.
            This setting is mandatory for <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> of Arbitrary; if specified for other data kinds, it is ignored.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncIntake">
      <summary>
            True will cause Data Conveyer to perform intake operations asynchronously (e.g. it will call <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextIntakeSupplier" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncIntakeSupplier" /> function if provided, not the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeSupplier" /> function).
            False (default) will cause Data Conveyer to perform intake operations synchronously, in which case the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeSupplier" /> function is called (if provided).
            Note that Data Conveyer performs such synchronous intake on a dedicated thread to prevent a possible deadlock condition.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncIntakeSupplier">
      <summary>
             An asynchronous function that supplies a task with (a promise of) a tuple containing an <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object (an input line to be fed into Data Conveyer) and the source number (1-based) (Func&lt;IGlobalCache, Task&lt;Tuple&lt;string,int&gt;&gt;&gt;).
             Data Conveyer calls this function when <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncIntake" /> is true (providing a single parameter - <see cref="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache" />) in succession until null is received.
             When end of data is reached (i.e. intake sources are depleted), the function must return a task with null result (end of data mark), which will initiate processing shutdown with a status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.IntakeDepleted" />.
             Note the difference between null tuples (end of data marks) and tuples containing null strings (ignored by Data Conveyer).
             Any returned tuples that contain null <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> objects are ignored by Data Conveyer; to send an empty line, a tuple containing an empty object (e.g. an empty string) needs to be returned.
             If not defined, Data Conveyer assumes default <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncIntakeSupplier" /> function that returns no data, but a task with an end of data result, i.e.:
             <code language="c#">gc =&gt; Task.FromResult&lt;Tuple&lt;string, int&gt;&gt;(null)</code><code language="vb">Function(gc) Task.FromResult(Of Tuple(Of String, Integer))(Nothing)</code>
             Any exception thrown by this function will cause the process shutdown with a completion status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed" />.
             </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncOutput">
      <summary>
            True will cause Data Conveyer to perform output operations asynchronously (i.e. it will call <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextOutputConsumer" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncOutputConsumer" /> function if provided, not the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputConsumer" /> function).
            False (default) to perform intake operations synchronously, in which case the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputConsumer" /> function is called (if provided).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncOutputConsumer">
      <summary>
             An asynchronous action (Task returning function) that consumes a tuple containing a <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object (a single output line received from Data Conveyer) and the target number (Func&lt;Tuple&lt;string, int&gt;, Task&gt;).
             Reference to global cache (<see cref="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache" />) is passed as the second parameter.
             The function is intended for use in case of a long-running operation to consume the output line, e.g. await LongRunningOperation(..).
             Data Conveyer calls this action (when <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncOutput" /> is true) in succession passing (tuples with) the output lines one at a time.
             The last tuple sent by Data Conveyer is always null (end of data mark).
             If not defined, Data Conveyer assumes default <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncOutputConsumer" /> action that ignores data passed to it, i.e.:
             <code language="c#">(tpl, gc) =&gt; Task.CompletedTask</code><code language="vb">Function(tpl, gc) Task.CompletedTask</code>
             Any exception thrown by this action will cause the process shutdown with a <see cref="T:Mavidian.DataConveyer.Orchestrators.CompletionStatus" /> of Failed.
             </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextIntakeSupplier">
      <summary>
             An asynchronous function that supplies a task promising contents of a single text line to be fed into Data Conveyer. (Func&lt;Task&lt;string&gt;&gt;).
             When end of data is reached, the function must return null (end of data mark).
             The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextIntakeSupplier" /> function is a simplified version of the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncIntakeSupplier" /> function where the following restrictions apply:
             <list type="bullet"><item>Input data kind is textual such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc. (and not for example <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" />).</item><item>All lines are associated with a single source.</item><item>No access to global cache.</item></list></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextOutputConsumer">
      <summary>
             An asynchronous action (Task returning function) that consumes a single line of text received from Data Conveyer. (Func&lt;string, Task&gt;).
             The last line sent by Data Conveyer is always null (end of data mark).
             The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextOutputConsumer" /> action is a simplified version of the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncOutputConsumer" /> action where the following restrictions apply:
             <list type="bullet"><item>Output data kind is textual such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc. (and not for example <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" />).</item><item>All lines are sent to a single target (regardless of the target determined by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterRouter" /> function).</item><item>No access to global cache.</item></list></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize">
      <summary>
            Capacity of a transformer buffer defined as a maximum number of clusters to be held unprocessed by Data Conveyer.
            This setting can be used to control memory consumption of Data Conveyer.
            Default value is -1, which means no limit.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.CloseLoggerOnDispose">
      <summary>
        <para>
            True (default) causes the logger to close (stop logging) when the orchestrator object is disposed.
            False keeps the logger open beyond the lifespan of the orchestrator object, which may be helpful in certain troubleshooting scenarios (e.g. to avoid System.ObjectDisposedException: Cannot write to a closed TextWriter when using LogFile logger).
            It is recommended that the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.CloseLoggerOnDispose" /> remains at its default value of true, except for troubleshooting scenarios.
            </para>
        <para>
            The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.CloseLoggerOnDispose" /> setting also affects the behavior of the <see cref="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SaveConfig(System.String)" /> method in case an error occurs:
            if true, then the error gets logged and the logger is closed (stops logging); if false, then the the error gets logged and the logger remains open.
            </para>
      </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterboundTransformer">
      <summary>
            A function that takes a single cluster and returns a single cluster; specific to <see cref="F:Mavidian.DataConveyer.Common.TransformerType.Clusterbound" /> transformer type.
            In case the function returns null (Nothing in Visual Basic), the cluster will be filtered out.
            This makes the <see cref="F:Mavidian.DataConveyer.Common.TransformerType.ClusterFilter"> and </see><see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterFilterPredicate" /> a special case of 
            <see cref="F:Mavidian.DataConveyer.Common.TransformerType.Clusterbound"> and </see><see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterboundTransformer" /> where unfiltered clusters are passed through.
            If not supplied, a default pass-through function is used that passes input cluster to output, i.e.:
             <code language="c#">clstr =&gt; clstr</code><code language="vb">Function(clstr) clstr</code>
             Any exception thrown by this function will cause the process shutdown (CompletionStatus of Failed).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterFilterPredicate">
      <summary>
            A predicate (boolean function) that takes a single cluster and returns true to accept the cluster or false to reject it; specific to <see cref="F:Mavidian.DataConveyer.Common.TransformerType.ClusterFilter" /> transformer type.
            If not supplied, a default pass-through predicate is used that always returns true, i.e.:
             <code language="c#">clstr =&gt; true</code><code language="vb">Function(clstr) True</code>
             Any exception thrown by this function will cause the process shutdown (CompletionStatus of Failed).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterMarker">
      <summary>
            A predicate (boolean function) to identify records that cause cluster splits (either starting a new cluster or ending a cluster depending on the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.MarkerStartsCluster" /> setting).
            It accepts 3 parameters: the current record, the previous record and the counter of records accumulated so far in the current cluster. Note that the previous record is null for the first record.
            If the predicate returns true, it causes cluster split (before or after the current record depending on <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.MarkerStartsCluster" /> value);
            returning false causes continuation of record accumulation into the current cluster.
            In case this function marks the first record of a cluster (i.e. <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.MarkerStartsCluster" /> is true), then the current record starts a new set of records accumulated for a cluster;
            otherwise (<see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.MarkerStartsCluster" /> is false, i.e. the function marks the last record of a cluster), the current record ends the set of records accumulated for a cluster, and a new empty
            set of accumulated records is created.
            If not specified, the default function will split clusters on every record, i.e.:
            <code language="c#">(r, pr, i) =&gt; true</code><code language="vb">Function(r, pr, i) True</code>
            Any exception thrown by this function will cause the process shutdown with a completion status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed" />.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterRouter">
      <summary>
            A function to determine the output target for every record in a given cluster.  It receives an output cluster and returns TargetNo to be assigned to every record of the cluster (Func&lt;ICluster, int&gt;).
            This function is specific to <see cref="F:Mavidian.DataConveyer.Common.RouterType.PerCluster" /> router type; it is ignored for other router types.  If not supplied, a default function that returns 1 for every cluster is assumed, i.e.:
            <code language="c#">clstr =&gt; 1</code><code language="vb">Function(clstr) 1</code>
            Any exception thrown by this function will cause the process shutdown with a completion status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed" />.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterSyncInterval">
      <summary>
            This advanced setting specifies number of milliseconds DataConveyer awaits when synchronizing processing of head and foot clusters.
            Note that regardless of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ConcurrencyLevel" /> setting, DataConveyer guarantees that the head cluster (if present) will be processed before
            all other clusters and that the foot cluster (if present) will be processed after all other clusters. The order of processing remaining ("regular")
            clusters is not guaranteed. The default setting of 40 ms is suitable for most scenarios.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ConcurrencyLevel">
      <summary>
            Degree of parallelism during transformation phase; defined as a maximum number of engines performing transformation.
            If not supplied, a default value of 1 is used.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ConfigName">
      <summary>
            Name of this configuration in case it was created from a .cfg (and optional .dll) file(s) via RestoreConfig method; otherwise null.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DataConveyerInfo">
      <summary>
            Information on current version of Data Conveyer.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DefaultInputFieldWidth">
      <summary>
            Default width of fields in flat input data; applicable only if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> is Flat, ignored otherwise.
            If not specified, a default width of 10 is assumed.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DefaultOutputFieldWidth">
      <summary>
            Default width of fields in the flat output data; applicable only if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> is Flat, ignored otherwise.
            If not specified, a default width of 10 is assumed.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DefaultX12FieldDelimiter">
      <summary>
            Default value of the field delimiter - applicable only to X12 data.
            On X12 intake, field delimiter is always determined from ISA segment, so this setting only applies in case ISA segment is absent (incomplete X12 envelope).
            On X12 output, in absence of this setting, field delimiter is determined from intake if also X12 (specifically, from the first ISA segment encountered), or a default value of '*' is assumed.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DefaultX12SegmentDelimiter">
      <summary>
            Default value of the segment delimiter - applicable only to X12 data.
            On X12 intake, segment delimiter is always determined from ISA segment, so this setting only applies in case ISA segment is absent (incomplete X12 envelope).
            On X12 output, in absence of this setting, segment delimiter is determined from intake if also X12 (specifically, from the first ISA segment encountered), or a default value of '~' is assumed.
            May contain multiple characters to make output easier to read, such as "~\r\n".
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DeferOutput">
      <summary>
            Defines when Data Conveyer is allowed to start the <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase.
            This setting should be left at its default value of <see cref="F:Mavidian.DataConveyer.Common.DeferOutput.Auto" />.
            The value of <see cref="F:Mavidian.DataConveyer.Common.DeferOutput.Indefinitely" /> is restricted for use in specialized tests only!
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DeferTransformation">
      <summary>
            Defines when Data Conveyer is allowed to start the <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase. One of:
            <list type="bullet"><item><see cref="F:Mavidian.DataConveyer.Common.DeferTransformation.NotDeferred" /> - (default) appropriate in most scenarios.</item><item><see cref="F:Mavidian.DataConveyer.Common.DeferTransformation.UntilRecordInitiation" /> - typically used in conjunction with the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordInitiator" /> function.</item><item><see cref="F:Mavidian.DataConveyer.Common.DeferTransformation.UntilIntakeCompletion" /> - not recommended, except for troubleshooting.</item><item><see cref="F:Mavidian.DataConveyer.Common.DeferTransformation.Indefinitely" /> - restricted for use in specialized tests only!</item></list>
            Note that after all records are read, the Intake phase still continues execution by executing record clustering. However, during the clustering process Data Conveyer has
            no ability totrigger the start of the Transformation phase. Similarly, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterMarker" /> function (unlike the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordInitiator" /> function ) has no ability 
            to set the trace bin contents.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.EagerInitialization">
      <summary>
            If true, all initializations are executed regardless if prior initializations failed or not. So, for example <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputInitializer" />  gets executed even after a failure of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeInitializer" />.
            This may result in unwanted reset of output (such as erasure of prior data) even if the process could not start due to a problem initializing intake.
            If false (default), any initialization failure (e.g. in <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeInitializer" />) will prevent execution of subsequent initializations (such as <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputInitializer" /> ).
            In this case, troubleshooting of output initialization is only possible after successful intake initialization.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ErrorOccurredHandler">
      <summary>
            Handler of the ErrorOccurred event. Data Conveyer calls this function (regardless of the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ReportProgress" /> setting)
            when an exception thrown during processing (for example in the caller supplied code) is unhandled. 
            This handler is intended for troubleshooting purposes. It occurs immediately before the process completes with the
            status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed" /> and provides the last chance to identify the reason of (but not recovery from) the failure. 
            Also note that any exceptions thrown by event handlers are discarded by Data Conveyer.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ExcludeExtraneousFields">
      <summary>
        <para>
            In case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" /> output data, this setting, when true, causes
            Data Conveyer to remove trailing, insignificant fields, i.e. fields with empty values (in addition, trailing spaces on the last field are removed);
              if false (default), then all fields are always included on output (in their entirety).
            <para></para>
            For <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Keyword" /> output data, the setting is only applicable when <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFields" /> setting is specified.
              If true, only those fields that are both: specified in <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFields" /> and also present in the actual records will be included on output.
              If false (default), all fields will always be included on output (empty values assumed for fields absent from the actual records).
              </para>
      </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ExcludeItemsMissingPrefix">
      <summary>
            True will cause exclusion of items (fields) with keys not matching the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputKeyPrefix" />; false (default) will include such fields (with keys in their entirety).
            Use caution when assigning true to this setting, as it may result in records with no contents (when none of the fields match prefix specified in <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputKeyPrefix" /> setting).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ExplicitTypeDefinitions">
      <summary>
        <para>
            This setting defines data types used in internal representations of record fields.
            It contains a set of keys (field names) along with their corresponding data types and optional formats.
            </para>
        <para>
            The setting is in the form of a comma delimited list of items, each item being a pipe delimited triplet: fldName|type|format,
             where type is one of: S=String, M=Decimal, D=DateTime, I=Integer, B=Boolean; and format is the format string used when formatting output.
            Format can be omitted with the preceding pipe, in which case no formatting will take place.
            Format has no relevance on intake. In addition, with one exception, format is ignored in JSON output, because JSON supports writing elements
            in their native data types. The exception is for fields of DateTime type, which are not supported in JSON. DateTime fields are converted to strings
            (respecting format) before being submitted to JSON output.
            </para>
        <para>
          <b>Example:</b>
          <c>"AMOUNT|M,BIRTH_DATE|D|M/d/yyyy,AGE|I"</c>
        </para>
        <para>
            Sequence of the elements in this setting is irrelevant.
            </para>
        <para>
            Types of the fields not specified in <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ExplicitTypeDefinitions" /> are determined by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TypeDefiner" /> function,
            which by default assumes string type and no format for all fields.
            </para>
        <note type="note">
          <para>
            In case of JSON intake, the elements are parsed according to JSON specifications, which involves automatic data type determination. However,
            in order to preserve this type, the corresponding field must be of a matching type. Otherwise, the type conversion will be performed.
            </para>
          <para>
            For example, a JSON element <c>"ID": 5</c> will be parsed as number 5. So, in order to avoid type conversion, a setting of <c>ID|I</c> is needed (otherwise, number 5
            will be converted to string "5"). Similarly, an element <c>"ID": "5"</c> will be parsed as string "5". Therefore, no type conversion will take place in absense
            of type definition for field "ID" (fields are strings by default); if however setting <c>ID|I</c> is present, then string "5" will be converted
            into number 5.
            </para>
        </note>
      </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.GlobalCacheElements">
      <summary>
        <para>
            A list of definitions of the elements to be held in the global cache (<see cref="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache" />). Global cache is a central repository of arbitrary key value pairs maintained throughout the Data Conveyer process.
            Each array element defines a single global cache element. The definition consists of the key optionally followed by a pipe symbol (|) and the initial value to be placed in global cache.
            Element keys are of string type (only letters and numbers are recommended). The type of each element depends on the element value: if specified after the pipe symbol, it can be one of: int, DataTime, decimal or string.
            In case no pipe symbol is present in element definition, the element will be of type object with a null value. Note that element values (and types as well) can be changed by the <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.ReplaceValue``2(System.String,System.Func{``0,``1})" /> method.
            </para>
        <para>Rules for determining the element type depend on the value placed after the pipe symbol (|):</para>
        <list type="bullet">
          <item>Any unquoted number without decimal point or commas will be of an int type.
            Int examples: "Int|0", "Val2|-15".</item>
          <item>An unquoted number with decimal point will be of a decimal type.
            Decimal examples: "Dec|0.", "AnotherDec|-3.5".</item>
          <item>A string in a valid date format will be of a DateTime type.
            DateTime examples: "Date|12/31/2012", Val2|12-DEC-12".</item>
          <item>Any quoted string or string not fitting other types will be of a string type. Strings can contain any characters including pipe symbols and quotes if quoted, i.e. staring with a quote (ending quote is optional).
            String examples (note escaped inner quotes): "Str|abc", "Val2|\"0\"", "Val3|\"0", "Val4|\"\"" (empty string), "Val5|" (empty string)).</item>
          <item>In absence of the pipe symbol, a null object is assumed, e.g. "Val1" (null).</item>
        </list>
        <para>Note that <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ExplicitTypeDefinitions" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TypeDefiner" /> settings have no meaning in determining the type of the global cache elements.</para>
        <para>Also note that this settings only defines the elements of the global cache, and not the signals, which are simply referred to in <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.RaiseSignal(System.String)" />, <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitSignal(System.String)" />
            and <see cref="M:Mavidian.DataConveyer.Orchestrators.IGlobalCache.AwaitSignalAsync(System.String)" /> methods.</para>
      </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.HeadersInFirstInputRow">
      <summary>
            True means 1st input line contains field names and data starts from the 2nd line; false (default) means data starts from the 1st line (default field names are assigned in this case).
            This setting applies only to data kinds that support header rows, such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />; otherwise, it is  ignored, in which case data always starts from the 1st line.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.HeadersInFirstOutputRow">
      <summary>
            True means 1st line sent to output will contain field names and data will start on the 2nd line; false (default) means no field names are sent to output and data starts on the 1st line. 
            This setting applies only to data kinds that support header rows, such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />; otherwise, it is  ignored, in which case data always starts on the 1st line.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind">
      <summary>
            Type (format) of input data: Raw, Keyword, Delimited, Flat, Arbitrary, XML, JSON or X12.  Default is Raw.
            These values are intended for future use: HL7 and Ultimate.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFields">
      <summary>
        <para>
            Comma delimited list of fields as they appear on intake lines.
            Each field is defined by a name and width, separated by a pipe (|) symbol.
            Field widths are only applicable to <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" /> (fixed width) data; they are ignored for other kinds of input data.  Where omitted or invalid, a default width (<see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DefaultInputFieldWidth" />) is assumed.
            Field names specified in this setting take precedence over those in the first row headers (<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" /> and <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" /> data), so in case of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.HeadersInFirstInputRow" />=true,
            the 1st row data may get discarded.
            </para>
        <para>
            If a field name is omitted, a default name will be used (either from the header row or from a formula, which yields Fldnnn, where nnn is the field sequence number; exception is <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.X12" /> data, where fields are named Segment, Elem001, Elem002, ...).
            This setting, when accompanied by <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AllowOnTheFlyInputFields" /> of false, can be used to only accept those fields specified and exclude all other fields from intake (e.g. in case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Keyword" /> data).
            </para>
        <para>Examples:</para>
        <list type="bullet">
          <listheader>Examples:</listheader>
          <item>
            <term>|10,|4,|12</term>
            <description> (flat data, records 26 character long, field names in header row or default names)</description>
          </item>
          <item>
            <term>Seq#|5, First Name|12,Mid Init|1, Last Name or Company|20, Zip Code|5</term>
            <description> (flat data, records 43 character long)</description>
          </item>
          <item>
            <term>Seq#,Name,Description</term>
            <description> (keyword data, exclude all fields from intake except for the 3 specified)</description>
          </item>
        </list>
      </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFieldSeparator">
      <summary>
            Character that separates fields on intake lines. Only applicable to Delimited and Keyword data, ignored in case of other data kinds.
            If not specified, a comma is assumed.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFileName">
      <summary>
        <para>
            A synonym for the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFileNames" /> setting (to make it more intuitive in case of a single input file).
            </para>
        <para>
          <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFileName" /> and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFileNames" /> settings should not be used both at the same time.
            </para>
      </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFileNames">
      <summary>
        <para>
            Name(s) of (i.e. path(s) to) the input file(s). This setting is the same as (synonym for) the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFileName" /> setting.
            If multiple files are specified, the names are separated by pipe symbols(|). Each name can be surrounded by double quotes. The first file is assigned SourceNo=1, the second SourceNo=2, etc.
            The files will be read one after another (in SourceNo order) either synchronously or asynchronously, depending on <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncIntake" /> setting.
            Ignored if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeReaders" /> setting (or one of their equivalent settings) is also submitted.
            </para>
        <para>
          <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFileName" /> and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFileNames" /> settings should not be used both at the same time.
            </para>
      </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputHeadersRepeated">
      <summary>
            Relevant only if multiple intake sources are present and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.HeadersInFirstInputRow" /> is true.
            True (default) means that all intake sources contain the header row; in this case Data Conveyer will read the headers from the first source that supplied intake data and will ignore the header rows from the remaining sources.
            False means that only the source that supplies the intake data first contains the header row (typically the source with SourceNo=1, but it can actually be any source); the remaining sources are assumed to only contain data rows (regardless of the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.HeadersInFirstInputRow" /> setting).
            In either case, the only header row actually considered is the one from the source that supplies intake first. Note that all intake sources are subjected to the same set of processing rules, which implies that the same header row is applicable to all sources (hence the header row should be identical for all sources).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputKeyPrefix">
      <summary>
            Prefix to be trimmed (removed) from every key on input, if any (e.g. @p).
            Default value is null (no prefix to be removed).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeBufferFactor">
      <summary>
            Ratio between sizes of the intake buffer and the transformer's input buffer (the latter is defined by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> setting).
            This advanced setting allows fine-tuning of memory consumption by Data Conveyer.
            For example, if an average cluster on intake is expected to be created from 4 intake records, then it may be sensible to set intake buffer size to 400 records
             and transformer's input buffer size to 100 clusters.  In this case, <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> = 100 and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeBufferFactor" /> = 4.0.
            Default value for <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeBufferFactor" /> is 1.5.
            This setting is respected only if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> is set to a positive value (i.e. ignored in case of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" />'s default value of -1 (Unlimited)).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeDisposer">
      <summary>
            An action intended to dispose any intake sources and related resources that were opened by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeInitializer" /> function.
            Data Conveyer calls this action a single time after completing orchestrator processing (when the orchestrator is disposed).
            However, if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextIntakeSupplier" /> function is not defined; then this action is not called.
            The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeDisposer" /> action accepts a single parameter (<see cref="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache" />) and returns void (Action&lt;IGlobalCache&gt;).
            If not defined, Data Conveyer assumes empty action, i.e.:
            <code language="c#">gc =&gt; { }</code><code language="vb">
            Sub(gc)
            End Sub
            </code>
            Any exception thrown by this action will be logged, but otherwise ignored.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeInitializer">
      <summary>
            A function intended to initialize any intake sources (such as open files or database connections) and related resources that may be needed by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextIntakeSupplier" /> function.
            Data Conveyer calls this function a single time before starting the actual orchestrator processing, such as invocations of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier" /> function, if one is defined.
            However, if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextIntakeSupplier" /> function is not defined; then this function is not called.
            The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeInitializer" /> function accepts a single parameter (<see cref="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache" />) and returns a string (Func&lt;IGlobalCache, string&gt;).
            Null returned value means successful initialization; otherwise, an error message indicating reason for the failure is expected to be returned (Data Conveyer will log this message).
            In case of failure, the processing will end in the <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.InitializationError" /> status.
            If not defined, default <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeInitializer" /> simply returns null, i.e.:
            <code language="c#">gc =&gt; null</code><code language="vb">Function(gc) Nothing</code></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeReader">
      <summary>
            A function returning a text reader object to supply data into the Data Conveyer intake process.
            This setting is equivalent to  <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeReaders" /> setting containing a single reader.
            <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeReader" /> and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeReaders" /> settings should not be used both at the same time.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeReaders">
      <summary>
            A function returning a collection of text reader objects to supply data into the Data Conveyer intake process. Each reader corresponds to a single intake source;
            the first reader is assigned SourceNo=1, the second SourceNo=2, etc.
            Data will be read from one reader after another, in SourceNo order, either synchronously or asynchronously, depending on <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncIntake" /> setting.
            Ignored if the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier" /> function (or applicable equivalent function) is also submitted.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeRecordLimit">
      <summary>
            Maximum number of intake records allowed for the process execution. Default value is -1, i.e.:
            <code language="c#">Unlimited</code><code language="vb">Unlimited</code></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeSupplier">
      <summary>
             A function that supplies a tuple containing a <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object (an input line to be fed into Data Conveyer) and the source number (1-based) (Func&lt;IGlobalCache, Tuple&lt;string,int&gt;&gt;).
             Data Conveyer calls this function when <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncIntake" /> is false (providing a single parameter - <see cref="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache" />) in succession until null is received.
             When end of data is reached (i.e. all intake sources are depleted), the function must return null (end of data mark), which will initiate processing shutdown with a status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.IntakeDepleted" />.
             Note the difference between null tuples (end of data marks) and tuples containing null <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> objects (ignored by Data Conveyer).
             Any returned tuples that contain null <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> objects are ignored by Data Conveyer; to send an empty line, a tuple containing an empty object (e.g. an empty string) needs to be returned.
             If not defined, Data Conveyer assumes default <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeSupplier" /> function that returns no data, but only the end of data mark, i.e.:
             <code language="c#">gc =&gt; null</code><code language="vb">Function(gc) Nothing</code>
             This function is called on a dedicated thread to prevent possible deadlocks in situations, such as UI updates made during progress changes.
             Any exception thrown by this function will cause the process shutdown with a completion status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed" />.
             </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.LeaderContents">
      <summary>
            Data, if any, to be sent to output before the first output line; may be multi-line.
            In case the header row is also present, then it will follow the leader contents.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.MarkerStartsCluster">
      <summary>
            True (default) means that <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterMarker" /> predicate matches the first record of a cluster (i.e. starts a cluster); false means that predicate matches the last record of a cluster (i.e. ends a cluster).
            As a general rule, true value is recommended (marker starts a cluster), especially in cases where <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterMarker" /> predicate relies on the previous record contents or the number of records accumulated so far;
            false value (marker ends a cluster) should only be used in cases where <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterMarker" /> predicate relies solely on the current record contents.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputBufferFactor">
      <summary>
            Ratio between sizes of the output buffer and the transformer's input buffer (transformer's input buffer size is defined by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> setting).
            This advanced setting allows fine-tuning of memory consumption by Data Conveyer.
            For example, if an average cluster on output is expected to produce 5 output records (and also on average every other cluster to be removed by the transformer),
             it may be sensible to set the transformer's input buffer size to 100 clusters (transformer's output buffer size to 50 clusters)
             and the output buffer size to 250 clusters.  In this case, <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> = 100 and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputBufferFactor" /> = 2.5.
            Default value for <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeBufferFactor" /> is 1.5.
            This setting is respected only if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> is set to a positive value (i.e. ignored in case of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" />'s default value of -1 (Unlimited)).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputConsumer">
      <summary>
             An action (void function) that consumes a tuple containing a <see cref="T:Mavidian.DataConveyer.Common.ExternalLine" /> object (a single output line received from Data Conveyer) and the target number (1-based). (Action&lt;Tuple&lt;string, int&gt;&gt;).
             Reference to global cache (<see cref="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache" /> is passed as the second parameter.
             Data Conveyer calls this action (when <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncOutput" /> is false) in succession passing (tuples with) the output lines one at a time.
             The last tuple sent by Data Conveyer is always null (end of data mark).
             If not defined, Data Conveyer assumes default <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputConsumer" /> action that ignores data passed to it, i.e.:
             <code language="c#">(tpl, gc) =&gt; { }</code><code language="vb">
             Sub(tpl, gc)
             End Sub
             </code>
             Any exception thrown by this action will cause the process shutdown with a <see cref="T:Mavidian.DataConveyer.Orchestrators.CompletionStatus" /> of Failed.
             </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind">
      <summary>
            Type (format) of output data: Raw, Keyword, Delimited, Flat, Arbitrary, X12, XML or JSON.  Default is Raw.
            HL7 and Ultimate types are designated for future use.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDisposer">
      <summary>
            An action intended to dispose any output targets and related resources that were opened by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputInitializer" /> function.
            Data Conveyer calls this action a single time after completing orchestrator processing (when the orchestrator is disposed).
            However, if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextOutputConsumer" /> action is not defined; then this function is not called.
            The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDisposer" /> action accepts a single parameter (<see cref="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache" />) and returns void (Action&lt;IGlobalCache&gt;).
            If not supplied, Data Conveyer assumes empty action, i.e.:
            <code language="c#">gc =&gt; { }</code><code language="vb">
            Sub(gc)
            End Sub
            </code>
            Any exception thrown by this function will be logged, but otherwise ignored.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFields">
      <summary>
        <para>
            Comma delimited list of fields to appear on output lines.
            Each field is defined by a name and width, separated by a pipe (|) symbol.
            Once this setting is specified, only those fields specified can be included in output.
            </para>
        <para>
            This setting is optional. However, it can only be omitted in its entirety, in which case all fields produced by transformation will be included in output.
            If the setting is present, then each field name must be specified (no default names can be assumed [unlike <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputFields" />]).
            If a name of a non-existing field is specified, then empty contents is sent to output for such field.
            </para>
        <para>
            Field widths are only applicable to <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" /> (fixed width) data output; they are ignored for other kinds of output data.
            Where omitted or invalid, a default width (<see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DefaultOutputFieldWidth" />) is assumed.
            </para>
      </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFieldSeparator">
      <summary>
            Character that separates fields on output lines. Only applicable to Delimited and Keyword data, ignored in case of other data kinds.
            If not specified, a comma is assumed.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFileName">
      <summary>
        <para>
            A synonym for the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFileNames" /> setting (to make it more intuitive in case of a single output file).
            </para>
        <para>
          <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFileName" /> and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFileNames" /> settings should not be used both at the same time.
            </para>      /// </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFileNames">
      <summary>
        <para>
            Name(s) of (path(s) to) the output file(s). This setting is the same as (synonym for) the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFileName" /> setting.
            </para>
        <para>
            If multiple files are specified, the names are separated by pipe symbols(|). Each name can be surrounded by double quotes. The first file is assigned TargetNo=1, the second TargetNo=2, etc.
            Number of files specified here must be equal the highest TargetNo returned by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterRouter" /> function.
            Ignored if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputWriters" /> setting (or one of their equivalent settings) is also submitted.
            </para>
        <para>
          <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFileName" /> and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputFileNames" /> settings should not be used both at the same time.
            </para>
      </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputInitializer">
      <summary>
            A function intended to initialize any output targets (such as open files or database connections) and related resources that may be needed by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextOutputConsumer" /> action.
            Data Conveyer calls this function a single time before starting the actual orchestrator processing, such as  invocations of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer" /> function if one is defined.
            However, if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.AsyncTextOutputConsumer" /> action is not defined; then this function is not called.
            The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputInitializer" /> function accepts a single parameter (<see cref="T:Mavidian.DataConveyer.Orchestrators.IGlobalCache" />) and returns a string (Func&lt;string&gt;).
            Null returned value means successful initialization; otherwise, an error message indicating reason for the failure is expected to be returned (Data Conveyer will log this message).
            This function may remain not called in case of failure of prior initializer (<see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeInitializer" />), in which case the processing will result in the <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.InitializationError" /> status.
            If not defined, default <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputInitializer" /> function simply returns null, i.e.:
            <code language="c#">gc =&gt; null</code><code language="vb">Function(gc) Nothing</code></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputKeyPrefix">
      <summary>
            Prefix to be prepended to every key on <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Keyword" /> output (e.g. @p).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputWriter">
      <summary>
            A function returning a text writer object to consume data produced by the Data Conveyer output.
            This setting is equivalent to  <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputWriters" /> setting containing a single writer.
            <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputWriter" /> and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputWriters" /> settings should not be used both at the same time.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputWriters">
      <summary>
            A function returning a collection of text writer objects to consume data produced by the Data Conveyer output. Each writer corresponds to a single output target;
            the first writer is assigned TargetNo=1, the second TargetNo=2, etc.
            Number of files specified here must be equal the highest TargetNo returned by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterRouter" /> function.
            Ignored if the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer" /> function (or applicable equivalent function) is also submitted.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.PhaseFinishedHandler">
      <summary>
            Handler of the PhaseFinished event. Data Conveyer calls this function at the end of a processing phase.
            Note that any exceptions thrown by event handlers are discarded by Data Conveyer.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.PhaseStartingHandler">
      <summary>
            Handler of the PhaseStarting event. Data Conveyer calls this function at start of a processing phase.
            Note that any exceptions thrown by event handlers are discarded by Data Conveyer.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.PrependHeadCluster">
      <summary>
            True causes Data Conveyer to add an extra empty cluster (so called head cluster) before the first cluster formed from intake records.
            False (default) means no foot cluster will be added at the end of intake.
            The head cluster always has a <see cref="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.StartRecNo" /> of 0 (<see cref="F:Mavidian.DataConveyer.Common.Constants.HeadClusterRecNo" />) and <see cref="P:Mavidian.DataConveyer.Entities.KeyVal.ICluster.StartSourceNo" /> of 1. Header and/or leader contents, if present, will precede the head cluster on output.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ProgressChangedHandler">
      <summary>
            Handler of the ProgressChanged event. Data Conveyer calls this function at specified intervals during processing.
            Note that any exceptions thrown by event handlers are discarded by Data Conveyer.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ProgressInterval">
      <summary>
            Frequency of raising the ProgressChanges event:
            <list type="bullet"><item><term>0</term><description> Never (default)</description></item><item><term>1</term><description> Every cluster</description></item><item><term>2</term><description> Every other cluster</description></item><item><term>...</term><description> Etc.</description></item></list>
            This setting is ignored if ReportProgree is false.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.PropertyBinEntities">
      <summary>
            Entities (such as records and/or clusters) that will have property bin objects attached to during Data Conveyer processing.
            Default value is <see cref="F:Mavidian.DataConveyer.Common.PropertyBinAttachedTo.Nothing" />, i.e. no property bins attached.
            This feature should be used judiciously due to its impact on performance.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.QuotationMode">
      <summary>
            Specifies which values are to be surrounded with quotes on output. One of:
            OnlyIfNeeded - Output values are not quoted, except for those that contain commas and/or quotes (default).
            StringsAndDates - String and date values are quoted on output, while decimal or integer values are not (except if formatted to contain commas).
            Always - All values are surrounded with quotes on output.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordboundTransformer">
      <summary>
            A function that takes a single record and returns a single record; specific to <see cref="F:Mavidian.DataConveyer.Common.TransformerType.Recordbound" /> transformer type.
            In case the function returns null (Nothing in Visual Basic), the record will be filtered out.
            This makes the <see cref="F:Mavidian.DataConveyer.Common.TransformerType.RecordFilter"> and </see><see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordFilterPredicate" /> a special case of 
            <see cref="F:Mavidian.DataConveyer.Common.TransformerType.Recordbound"> and </see><see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordboundTransformer" /> where unfiltered records are passed through.
            If not supplied, a default pass-through function is used that passes input record to output, i.e.:
            <code language="c#">rec =&gt; rec</code><code language="vb">Function(rec) rec</code>
            Any exception thrown by this function will cause the process shutdown with a completion status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed" />.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordFilterPredicate">
      <summary>
            A predicate (boolean function) that takes a single record and returns true to accept the record or false to reject it; specific to <see cref="F:Mavidian.DataConveyer.Common.TransformerType.RecordFilter" /> transformer type.
            Note that in case all records for a cluster are rejected, then the cluster will be rejected.
            If not supplied, a default pass-through predicate is used that always returns true, i.e.:
             <code language="c#">rec =&gt; true</code><code language="vb">Function(rec) True</code>
             Any exception thrown by this function will cause the process shutdown (CompletionStatus of Failed).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordInitiator">
      <summary>
        <para>Introduces records into the processing pipeline of Data Conveyer.</para>
        <para>
            This function is called once per record immediately after the record is read from intake and parsed, before being forwarded to the clustering process.
            There are 2 roles of this function: trace bin setup and trigger the start of the <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase.
            Any data collected from the current record can be stored in a trace bin for access during processing of subsequent records (as well as during subsequent phases of processing).
            The start of the <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase can be triggered by this function only in case of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DeferTransformation" /> set to <see cref="F:Mavidian.DataConveyer.Common.DeferTransformation.UntilRecordInitiation" />.
            </para>
        <para>The function accepts 2 parameters: current record and a trace bin object (dictionary).
            The function returns boolean value to trigger the start of the <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> phase in case of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DeferTransformation" /> set to <see cref="F:Mavidian.DataConveyer.Common.DeferTransformation.UntilRecordInitiation" />.
            Note that records are processed sequentially on <see cref="F:Mavidian.DataConveyer.Common.Phase.Intake" />; after returning the first true (or if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DeferTransformation" /> setting is other than <see cref="F:Mavidian.DataConveyer.Common.DeferTransformation.UntilRecordInitiation" />),
            the values returned by this function are inconsequential.
            In case <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordInitiator" /> returns false for all records and the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.DeferTransformation" /> is <see cref="F:Mavidian.DataConveyer.Common.DeferTransformation.UntilRecordInitiation" />, the transformation starts after all input records have been read.</para>
        <para>Deferral of <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation" /> may be useful in cases where transformation of initial clusters (e.g. head cluster) requires data that is read from some records during <see cref="F:Mavidian.DataConveyer.Common.Phase.Intake" /> and saved in global cache.
            Note though that such deferral affects performance as well as memory footprint; and in case of limited buffer sizes may lead to deadlocks.</para> 
            If not supplied, Data Conveyer assumes default function that does not make any updates and returns true, i.e.:
            <code language="c#">(rec, tb) =&gt; true</code><code language="vb">Function(rec, tb) True</code>
            Any exception thrown by this function will cause the process shutdown with a completion status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed" />.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RecordRouter">
      <summary>
            A function to determine the output target for a given record. It receives an output record and a cluster that contains the record and returns TargetNo to be assigned to the record (Func&lt;IRecord, ICluster, int&gt;).
            This function is specific to <see cref="F:Mavidian.DataConveyer.Common.RouterType.PerRecord" /> router type; it is ignored for other router types.  If not supplied, a default function that returns 1 for every record is assumed, i.e.:
            <code language="c#">(rec, clstr) =&gt; 1</code><code language="vb">Function(rec, clstr) 1</code>
            Any exception thrown by this function will cause the process shutdown with a completion status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed" />.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RepeatLeaders">
      <summary>
            Relevant only if multiple output targets are present and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.LeaderContents" /> is not null.
            If true (default), then the trailer rows will be send to all output targets after sending data rows.
            If false, then the trailer rows  will only be sent the last output target (typically the one with the highest TargetNo, but it can actually be any target).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RepeatOutputHeaders">
      <summary>
            Relevant only if multiple output targets are present and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.HeadersInFirstOutputRow" /> is true.
            If true (default), then the header row will be sent to all output targets before sending data rows.
            If false, then the header row will only be sent the first output target (typically the one with TargetNo=1, but it can actually be any target).
            <i>Note that all output targets are subjected to the same set of processing rules, which implies that the same header row applies to all targets regardless if it's repeated for all sources or not.</i></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RepeatTrailers">
      <summary>
            Relevant only if multiple output targets are present and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TrailerContents" /> is not null.
            If true (default), then the trailer rows will be send to all output targets after sending data rows.
            If false, then the trailer rows  will only be sent the last output target (typically the one with the highest TargetNo, but it can actually be any target).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ReportProgress">
      <summary>
            True causes Data Conveyer to raise progress events, i.e. PhaseStarted, PhaseFinished and (if ProgressInterval other than 0) ProgressChanged.
            If false (default), then no progress events occur.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RestoreConfig(System.String,Mavidian.DataConveyer.Logging.ILogger)">
      <summary>
            A factory method to create a configuration instance from saved configuration settings.
            The configuration consists of 1 or 2 files: a .cfg file (required) containing configuration data in XML format (as saved by the <see cref="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SaveConfig(System.String)" /> method),
            and a .dll file (optional) containing executable code, i.e. static functions named the same as the corresponding configured delegates (e.g. <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TypeDefiner" /> or <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterMarker" />).
            The DLL must be built as standalone .NET class library project using Visual Studio (or equivalent). The project must reference the current version of
            Data Conveyer (so, it must be rebuilt with each upgrade). The functions must be placed in a static class named ConfigFunctions.
            Both files (.cfg and .dll) must be placed in the same folder as DataConveyer.dll.
            </summary>
      <param name="configPath">Name of the configuration to restore, which is the same as the names of the files with configuration data, but without .cfg/.dll extension.
            It may be preceded by a path (absolute or relative).</param>
      <param name="logger">Logger to be used to process log entries generated by Data Conveyer, such as warnings or errors. If omitted, a <see cref="F:Mavidian.DataConveyer.Logging.LoggerType.Null" /> logger will be assumed.</param>
      <returns>The restored configuration instance or null in case of failure.</returns>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RetainQuotes">
      <summary>
            True will keep double quotes surrounding values if any; false (default) will strip surrounding quotes.
            Note that quotes are stripped before possible trimming; so unless quote is the very 1st character, quotes will be retained regardless of this setting.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RouterType">
      <summary>
            Type of router that determines the output target. One of: SingleTarget (default), SourceToTarget, PerCluster or PerRecord.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SaveConfig(System.String)">
      <summary>
            Save current configuration setting into an XML configuration file.
            Note that only non-executable settings are saved; functions cannot be saved this way.
            Instead, functions can be contained in the a ConfigFunctions class of a separate project.
            </summary>
      <param name="configPath">Name of the configuration to save, which is the same as the file name without .cfg extension and may be preceded by a path (absolute or relative).</param>
      <returns>True if the XML file successfully crated; false otherwise.</returns>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{System.Threading.Tasks.Task{Mavidian.DataConveyer.Common.ExternalLine}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of any intake from a single source and no need to access the global cache.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a task promising an ExternalLine object.
            The function has no access to global cache and is suitable in case of a single source intake (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}}}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of record-centric intake (such as from a single source and no need to access the global cache.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. In either case, data returned by this function is processed the same way.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a task promising a record expressed as a sequence of key-value pairs.
            The function has no access to global cache and is suitable in case of a single source intake (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{System.Threading.Tasks.Task{System.String}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of textual intake (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) from a single source and no need to access the global cache.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a task promising a string representing a line of text.
            The function has no access to global cache and is suitable in case of a single source intake (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{System.Threading.Tasks.Task{System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32}}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of any intake from multiple sources and no need to access the global cache.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a task promising a tuple containing an ExternalLine object and a corresponding source number.
            The function has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{System.Threading.Tasks.Task{System.Tuple{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32}}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of record-centric intake from multiple sources and no need to access the global cache.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. In either case, data returned by this function is processed the same way.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a task promising a tuple containing a record (expressed as a sequence of key-value pairs) and a corresponding source number.
            The function has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{System.Threading.Tasks.Task{System.Tuple{System.String,System.Int32}}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of textual intake (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) from multiple sources and no need to access the global cache.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a task promising a tuple containing a line of text and a corresponding source number.
            The function has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task{Mavidian.DataConveyer.Common.ExternalLine}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of any intake from a single source when access to the global cache is needed.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a task promising an ExternalLine object.
            The function is suitable in case of a single source intake (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}}}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of record-centric intake from a single source when access to the global cache is needed.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. In either case, data returned by this function is processed the same way.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a task promising a record expressed as a sequence of key-value pairs.
            The function is suitable in case of a single source intake (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task{System.String}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of textual intake (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) from a single source when access to the global cache is needed.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a task promising a string representing a line of text.
            The function is suitable in case of a single source intake (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task{System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32}}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This is the universal overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method.
            It may be used in case of any input from multiple sources when access to the global cache is needed.
            In most practical scenarios, other overloads are more suitable (easier to implement).
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a task promising a tuple containing an ExternalLine object and a source number.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task{System.Tuple{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32}}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of record-centric intake from multiple sources when access to the global cache is needed.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. In either case, data returned by this function is processed the same way.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a task promising a tuple containing a record (expressed as a sequence of key-value pairs) and the corresponding source number.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task{System.Tuple{System.String,System.Int32}}})">
      <summary>
            Designates an asynchronous intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncIntakeSupplier">SetAsyncIntakeSupplier</see> method is intended for use in case of textual intake (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) from multiple sources when access to the global cache is needed.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a task promising a tuple containing a line of text and the corresponding source number.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{Mavidian.DataConveyer.Common.ExternalLine,System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of any output to a single target and no need to access the global cache.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes a single parameter containing an ExternalLine object.
            The action has no access to global cache and is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of record-centric output to a single target and no need to access the global cache.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. See the note below for differences between these two kinds.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes a single parameter containing a record expressed as a sequence of key-value pairs.
            The action has no access to global cache and is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.String,System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of textual output (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) to a single target and no need to access the global cache.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes a single parameter containing a line of text.
            The action has no access to global cache and is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32},System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of any output to multiple targets and no need to access the global cache.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes a single parameter: a tuple containing an ExternalLine object and a corresponding target number.
            The action has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.Tuple{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32},System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of record-centric output to multiple targets and no need to access the global cache.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. See the note below for differences between these two kinds.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes a single parameter: a tuple containing a record expressed as a sequence of key-value pairs and a corresponding target number.
            The action has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.Tuple{System.String,System.Int32},System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of textual output (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) to multiple targets and no need to access the global cache.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes a single parameter: a tuple containing a line of text and a corresponding target number.
            The action has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{Mavidian.DataConveyer.Common.ExternalLine,Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of any output to a single target when access to the global cache is needed.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes 2 parameters: (1) an ExternalLine object , and (2) a reference to global cache.
            The action is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of record-centric output to a single target when access to the global cache is needed.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. See the note below for differences between these two kinds.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes 2 parameters: (1) a record expressed as a sequence of key-value pairs, and (2) a reference to global cache.
            The action is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.String,Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of textual output (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) to a single target when access to the global cache is needed.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes 2 parameters: (1) a line of text, and (2) a reference to global cache.
            The action is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32},Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This is the universal overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method.
            It may be used in case of any output to multiple targets when access to the global cache is needed.
            In most practical scenarios, other overloads are more suitable (easier to implement).
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes 2 parameters: (1) a tuple containing an ExternalLine object and a source number, and (2) a reference to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.Tuple{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32},Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of record-centric output to multiple targets when access to the global cache is needed.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. See the note below for differences between these two kinds.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes 2 parameters: (1) a tuple containing a tuple containing a record expressed as a sequence of key-value pairs and a corresponding target number, and (2) a reference to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer(System.Func{System.Tuple{System.String,System.Int32},Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Threading.Tasks.Task})">
      <summary>
            Designates an asynchronous output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetAsyncOutputConsumer">SetAsyncOutputConsumer</see> method is intended for use in case of textual output (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) to multiple targets when access to the global cache is needed.
            </summary>
      <param name="consumerToSet">An asynchronous action (task-returning function) that takes 2 parameters: (1) a tuple containing a line of text and a corresponding target number, and (2) a reference to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{Mavidian.DataConveyer.Common.ExternalLine})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of any intake from a single source and no need to access the global cache.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns an ExternalLine object.
            The function has no access to global cache and is suitable in case of a single source (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}}})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of record-centric intake from a single source and no need to access the global cache.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. In either case, data returned by this function is processed the same way.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a record expressed as a sequence of key-value pairs.
            The function has no access to global cache and is suitable in case of a single source (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{System.String})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of textual intake (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) from a single source and no need to access the global cache.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a string representing a line of text.
            The function has no access to global cache and is suitable in case of a single source (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32}})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of any intake from multiple sources and no need to access the global cache.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a tuple containing an ExternalLine object and a corresponding source number.
            The function has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{System.Tuple{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32}})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of record-centric intake from multiple sources and no need to access the global cache.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. In either case, data returned by this function is processed the same way.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a tuple containing a record (expressed as a sequence of key-value pairs) and a corresponding source number.
            The function has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{System.Tuple{System.String,System.Int32}})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of textual intake (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) from multiple sources and no need to access the global cache.
            </summary>
      <param name="supplierToSet">A function that takes no parameters and returns a tuple containing a line of text and a corresponding source number.
            The function has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,Mavidian.DataConveyer.Common.ExternalLine})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of any intake from a single source when access to the global cache is needed.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns an ExternalLine object.
            The function is suitable in case of a single source (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}}})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of record-centric intake from a single source when access to the global cache is needed.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. In either case, data returned by this function is processed the same way.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a record expressed as a sequence of key-value pairs.
            The function is suitable in case of a single source (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.String})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of textual intake (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) from a single source when access to the global cache is needed.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a string representing a line of text.
            The function is suitable in case of a single source (the implied source number is 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32}})">
      <summary>
            Designates an intake supplier function.
            This is the universal overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see>  method.
            It may be used in case of any input from multiple sources when access to the global cache is needed.
            In most practical scenarios, other overloads are more suitable (easier to implement).
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a tuple containing an ExternalLine object and a source number.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Tuple{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32}})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of record-centric intake from multiple sources when access to the global cache is needed.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. In either case, data returned by this function is processed the same way.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a tuple containing a record (expressed as a sequence of key-value pairs) and the corresponding source number.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier(System.Func{Mavidian.DataConveyer.Orchestrators.IGlobalCache,System.Tuple{System.String,System.Int32}})">
      <summary>
            Designates an intake supplier function.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetIntakeSupplier">SetIntakeSupplier</see> method is intended for use in case of textual intake (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) from multiple sources when access to the global cache is needed.
            </summary>
      <param name="supplierToSet">A function that takes a single parameter (reference to global cache) and returns a tuple containing a line of text and the corresponding source number.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{Mavidian.DataConveyer.Common.ExternalLine})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method can be used in case of any output to a single target and no need to access the global cache.
            </summary>
      <param name="consumerToSet">An action (void function) that takes a single parameter containing an ExternalLine object.
            The action has no access to global cache and is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}}})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of record-centric output to a single target and no need to access the global cache.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. See the note below for differences between these two kinds.
            </summary>
      <param name="consumerToSet">An action (void function) that takes a single parameter containing a record expressed as a sequence of key-value pairs.
            The action has no access to global cache and is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.String})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of textual output (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) to a single target and no need to access the global cache.
            </summary>
      <param name="consumerToSet">An action (void function) that takes a single parameter containing a line of text.
            The action has no access to global cache and is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32}})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of any output to multiple targets and no need to access the global cache.
            </summary>
      <param name="consumerToSet">An action (void function) that takes a single parameter: a tuple containing an ExternalLine object and a corresponding target number.
            The action has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.Tuple{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32}})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of record-centric output to multiple targets and no need to access the global cache.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. See the note below for differences between these two kinds.
            </summary>
      <param name="consumerToSet">An action (void function) that takes a single parameter: a tuple containing a record expressed as a sequence of key-value pairs and a corresponding target number.
            The action has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.Tuple{System.String,System.Int32}})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of textual output (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) to multiple targets and no need to access the global cache.
            </summary>
      <param name="consumerToSet">An action (void function) that takes a single parameter: a tuple containing a line of text and a corresponding target number.
            The action has no access to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{Mavidian.DataConveyer.Common.ExternalLine,Mavidian.DataConveyer.Orchestrators.IGlobalCache})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of any output to a single target when access to the global cache is needed.
            </summary>
      <param name="consumerToSet">An action (void function) that takes 2 parameters: (1) an ExternalLine object, and (2) a reference to global cache.
            The action is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},Mavidian.DataConveyer.Orchestrators.IGlobalCache})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of record-centric output to a single target when access to the global cache is needed.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. See the note below for differences between these two kinds.
            </summary>
      <param name="consumerToSet">An action (void function) that takes 2 parameters: (1) a record expressed as a sequence of key-value pairs, and (2) a reference to global cache.
            The action is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.String,Mavidian.DataConveyer.Orchestrators.IGlobalCache})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of textual output (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) to a single target when access to the global cache is needed.
            </summary>
      <param name="consumerToSet">An action (void function) that takes 2 parameters: (1) a line of text, and (2) a reference to global cache.
            The action is suitable in case of a single target (it will direct all output to target number 1).</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.Tuple{Mavidian.DataConveyer.Common.ExternalLine,System.Int32},Mavidian.DataConveyer.Orchestrators.IGlobalCache})">
      <summary>
            Designates an output consumer action.
            This is the universal overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method.
            It may be used in case of any output to multiple targets when access to the global cache is needed.
            In most practical scenarios, other overloads are more suitable (easier to implement).
            </summary>
      <param name="consumerToSet">An action (void function) that takes 2 parameters: (1) a tuple containing an ExternalLine object and a source number, and (2) a reference to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.Tuple{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}},System.Int32},Mavidian.DataConveyer.Orchestrators.IGlobalCache})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of record-centric output to multiple targets when access to the global cache is needed.
            To use this overload, the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> setting must be either <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. See the note below for differences between these two kinds.
            </summary>
      <param name="consumerToSet">An action (void function) that takes 2 parameters: (1) a tuple containing a tuple containing a record expressed as a sequence of key-value pairs and a corresponding target number, and (2) a reference to global cache.</param>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer(System.Action{System.Tuple{System.String,System.Int32},Mavidian.DataConveyer.Orchestrators.IGlobalCache})">
      <summary>
            Designates an output consumer action.
            This overload of the <see cref="O:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.SetOutputConsumer">SetOutputConsumer</see> method is intended for use in case of textual output (such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc.) to multiple targets when access to the global cache is needed.
            </summary>
      <param name="consumerToSet">An action (void function) that takes 2 parameters: (1) a tuple containing a line of text and a corresponding target number, and (2) a reference to global cache.</param>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier">
      <summary>
             A function that supplies contents of a single text line to be fed into Data Conveyer. (Func&lt;string&gt;).
             When end of data is reached, the function must return null (end of data mark).
             The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextIntakeSupplier" /> function is a simplified version of the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeSupplier" /> function where the following restrictions apply:
             <list type="bullet"><item>Input data kind is textual such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc. (and not for example <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" />).</item><item>All lines are associated with a single source.</item><item>No access to global cache.</item></list></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer">
      <summary>
             An action (void function) that consumes a single line of text received from Data Conveyer. (Action&lt;string&gt;).
             The last line sent by Data Conveyer is always null (end of data mark).
             The <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TextOutputConsumer" /> action is a simplified version of the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputConsumer" /> action where the following restrictions apply:
             <list type="bullet"><item>Output data kind is textual such as <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Delimited" />, <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.Flat" />, etc. (and not for example <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" />).</item><item>All lines are sent to a single target (regardless of the target determined by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterRouter" /> function).</item><item>No access to global cache.</item></list></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TimeLimit">
      <summary>
            Maximum amount of time allowed for the process execution. Default value is -1 ms, i.e.:
            <code language="c#">Timeout.InfiniteTimeSpan</code><code language="vb">Timeout.InfiniteTimeSpan</code></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TrailerContents">
      <summary>
            Data, if any, to be sent to output after the last output line; may be multi-line.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TransformBufferFactor">
      <summary>
            Ratio between sizes of the transformer's output and input buffers (transformer's input buffer size is defined by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> setting).
            This advanced setting allows fine-tuning of memory consumption by Data Conveyer.
            For example, if transformation process is expected to remove (filter out) on average every other cluster, then it may be sensible to set transformer's input buffer size to 100 clusters
             and the transformer's output buffer size to 50 clusters.  In this case, <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> = 100 and <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TransformBufferFactor" /> = 0.5.
            Default value for <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.IntakeBufferFactor" /> is 1.0.
            This setting is respected only if <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" /> is set to a positive value (i.e. ignored in case of <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.BufferSize" />'s default value of -1 (Unlimited)).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TransformerType">
      <summary>
            Type of the transformer: Clusterbound, Recordbound, ClusterFilter, RecordFilter or Universal.  Default transformer type is Recordbound.
            The Aggregator type is designated for future use.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TrimInputValues">
      <summary>
            True means leading and trailing spaces will be trimmed from values encountered during intake; default is false meaning all spaces are preserved.
            Note that <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.RetainQuotes" /> = true will prevent trimming of quoted values.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TrimOutputValues">
      <summary>
            True means that leading and trailing spaces will be trimmed from output values. False (default) means that all spaces are preserved.
            Values get trimmed before surrounding in quotes (per <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.QuotationMode" /> setting).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.TypeDefiner">
      <summary>
            A function to determine data types for those fields that are not listed in <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ExplicitTypeDefinitions" />.
            The function takes a field name and returns an ItemDef consisting of a type and format for the field.
            Default function assumes every field is of string type and has no format, i.e.:
            <code language="c#">fn =&gt; new ItemDef(ItemType.String, null)</code><code language="vb">Function(fn) New ItemDef(ItemType.[String], Nothing)</code>
            Any exception thrown by this function will cause the process shutdown with a completion status of <see cref="F:Mavidian.DataConveyer.Orchestrators.CompletionStatus.Failed" />.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.UniversalTransformer">
      <summary>
             A function that  takes a single cluster and returns a sequence of clusters; specific to <see cref="F:Mavidian.DataConveyer.Common.TransformerType.Universal" /> transformer type.
             If not supplied, a default pass-through function is used that passes input cluster to output as a single element enumerable, i.e.:
             <code language="c#">clstr =&gt; Enumerable.Repeat(clstr, 1)</code><code language="vb">Function(clstr) Enumerable.Repeat(clstr, 1)</code>
             Any exception thrown by this function will cause the process shutdown (CompletionStatus of Failed).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.XmlJsonIntakeSettings">
      <summary>
            A string containing comma-separated paraketers for parsing <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> data on intake.
            Each such parameter is a key-value pair with a pipe symbol (|) separating the key and the value.
            The parameters reflect the shape of data to parse and define the elements to be extracted.
            There are some differences (explained below) in their interpretation in case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> vs <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />.
            The following keys can be used:
            <list type="bullet"><item><term>CollectionNode</term><description>
                  "xpath" to the collection of clusters (or records if the ClusterNode parameter is absent).
                  If this parameter is absent for <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" />, then intake is expected to contain XML fragment where each root constitutes record or cluster.
                  In case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />, absent or empty value generally means an array instead of an object.
                </description></item><item><term>ClusterNode</term><description>
                  "xpath" to the cluster node within the collection node. Records within a cluster node will be assigned the same cluster number (sequential).
                  If this parameter is absent, then all records will be assigned a cluster number of 0 (undetermined) and the clusters will
                  be determined solely by the <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.ClusterMarker" /> function.
                </description></item><item><term>RecordNode</term><description>
                  "xpath" to the record node within the cluster node (or the collection node if the cluster node is empty).
                  The RecordNode parameter cannot be absent, although in case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />, it can be empty.
                </description></item><item><term>IncludeExplicitText</term><description><see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> only, ignored in case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. true to include explicit text inside record nodes in XML data; false (default) to ignore explicit text.
                  Explicit text is the text contained directly inside an XML element that also contains inner elements; for example &lt;rec&gt;ExplicitText&lt;ID&gt;2&lt;/ID&gt;&lt;/rec&gt;.
                  Data Conveyer assigns a special key of "__explicitText__" to explicit text in the record node.
                </description></item></list><note type="note"><para>
            "xpath" in any of the node parameters is a simplified version of the xpath syntax.
            It is always relative to the containing node (no need for ./).
            </para><para>
            In case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />, it contains names of nodes (nested in the node hierarchy) separated by /.
            Empty nodes are allowed, in which case the intake is expected to contain an array at a given hierarchy level.
            </para><para>
            In case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" />, each node can contain attributes. For example, "xpath" of "Department[@name=\"QA\"]/Employees" can be used to identify employees of the QA department.
            Empty nodes are not allowed and the // syntax is not supported.
            </para></note><para><b>Example 1:</b><c>"CollectionNode|Members,RecordNode|Member"</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />)</i></para><para><b>Example 2:</b><c>"CollectionNode|Root/Members,ClusterNode|Group/FamilyRecordNode|Member"</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />)</i></para><para><b>Example 3:</b><c>"RecordNode|row"</c><i>(XML fragment or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> object with an array)</i></para><para><b>Example 4:</b><c>"CollectionNode|,RecordNode|"</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> only - an array of objects=records)</i></para><para><b>Example 5:</b><c>"ClusterNode|,RecordNode|"</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> only - an array of arrays=clusters of objects=records)</i></para><para><b>Example 6:</b><c>"RecordNode|"</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> only - multiple objects containing records)</i></para><para><b>Example 7:</b><c>"CollectionNode|Root/Members[@region=\"North\"],ClusterNode|Group[@id=2][@zone=\"\"]/Family,RecordNode|Data/Member[@class],IncludeExplicitText|true"</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> only)</i></para><para>This configuration setting is only applicable when <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.InputDataKind" /> value is <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />.</para></summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.XmlJsonOutputSettings">
      <summary>
            A string containing comma separated parameters for writing <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> data on output.
            Each such parameter is a key-value pair with a pipe symbol (|) separating the key and the value.
            The parameters define the shape of data to write.
            There are some differences (explained below) in their interpretation in case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> vs <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />.
            The following keys can be used:
            <list type="bullet"><item><term>CollectionNode</term><description>
                  "xpath" defining the collection of clusters (or records if the ClusterNode parameter is absent).
                  If this parameter is absent for <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" />, then output will contain XML fragment where each root constitutes record or cluster.
                  In case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />, absent or empty value generally means an array instead of an object.
                </description></item><item><term>ClusterNode</term><description>
                  "xpath" to the cluster node within the collection node. Records with the same cluster number will be placed inside the same cluster node.
                  If this parameter is absent, then all records will be placed directly in the collection node regardless of their cluster number.
                </description></item><item><term>RecordNode</term><description>
                  "xpath" to the record node within the cluster node (or the collection node if the cluster node is empty).
                  In case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> this parameter is required; if absent or empty, a default value of "__record__" will be assumed.
                  In case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> this parameter can be empty (or even absent if CollectionNode and ClusterNode are also empty - special case to output multiple objects containing records).
                </description></item><item><term>AttributeFields</term><description><see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> only, ignored in case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. A semi-colon separated list of field names (item keys) to be projected as attributes of the record node (and not inner nodes).</description></item><item><term>IndentChars</term><description>
                  A string to use when indenting, e.g. "\t" or "  ". This parameter allows to "pretty-print" the output. When absent, no indenting takes place.
                  Note that in case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />, the only sensible value for this parameter contains a string containg a single character (possibly repeated,
                  e.g. "   " or "\t"; if different characters are used (e.g. " \t" i.e. a space and a tab), then the output may not be as expected.
                </description></item><item><term>NewLineChars</term><description><see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> only, ignored in case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />. Characters to use for line breaks (to "pretty-print" the <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> output).</description></item></list><note type="note"><para>
            "xpath" in any of the node parameters is a simplified version of the xpath syntax.
            It is always relative to the containing node (no need for ./).
            </para><para>
            In case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />, it contains names of the nodes (nested in the node hierarchy) separated by /.
            Empty nodes are allowed, in which case the output at a given hierarchy level consist of an array instead of an object containing an array.
            Special case: when CollectionNode, ClusterNode and RecordNode are all absent, then output will consist of multiple objects containing records.
            </para><para>
            In case of <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" />, empty nodes are not allowed. In addition, node names must be valid XML names (notes that certain
            characters, such as spaces, are not allowed in XML even though they are allowed in JSON).
            Attributes can be specified, but must include both name and value. In such cases,
            an attribute will be added to the node on output. Care needs to be taken in case of attributes of the record node to avoid name duplicates with the
            records fields (when AttributeFields parameter is used).
            </para></note><para><b>Example 1:</b><c>"CollectionNode|Members,RecordNode|Member,IndentChars|  "</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />)</i></para><para><b>Example 2:</b><c>"RecordNode|Member,IndentChars|\t"</c><i>(XML or JSON)</i></para><para><b>Example 3:</b><c>"CollectionNode|Root/Members,ClusterNode|Group/Subgroup/Family,RecordNode|Data/Member"</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />)</i></para><para><b>Example 4:</b><c>"RecordNode|,IndentChars|  "</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> only - an array of object containing records)</i></para><para><b>Example 5:</b><c>"ClusterNode|,RecordNode|"</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" /> only - an array of arrays=clusters of objects=records)</i></para><para><b>Example 6:</b><c>""</c><i>(JSON only - all node parameters absent is a special case that results in multiple objects containing records)</i></para><para><b>Example 7:</b><c>"CollectionNode|Root/Members[@region=North],ClusterNode|Group[@id=2][@zone=\"\"]/Family,RecordNode|Data/Member[@class=\"main\"],AttributeFields|ID;zone"</c><i>(<see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> only)</i></para><para>This configuration setting is only applicable when <see cref="P:Mavidian.DataConveyer.Orchestrators.OrchestratorConfig.OutputDataKind" /> value is <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.XML" /> or <see cref="F:Mavidian.DataConveyer.Common.KindOfTextData.JSON" />.</para></summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.OrchestratorCreator">
      <summary>
            A factory class to create orchestrator instances, i.e. objects that implement the <see cref="T:Mavidian.DataConveyer.Orchestrators.IOrchestrator" /> interface.
            </summary>
    </member>
    <member name="M:Mavidian.DataConveyer.Orchestrators.OrchestratorCreator.GetEtlOrchestrator(Mavidian.DataConveyer.Orchestrators.OrchestratorConfig)">
      <summary>
            A factory method to create an instance of ETL orchestrator.
            </summary>
      <param name="config">Configuration parameters of ETL orchestrator to create.</param>
      <returns>The instance of ETL orchestrator (just created).</returns>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.PhaseEventArgs">
      <summary>
            Arguments for PhaseStarting and PhaseFinished events
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseEventArgs.ClstrCnt">
      <summary>
            Total number of clusters processed by the phase (0 in case of PhaseStarting event).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseEventArgs.GlobalCache">
      <summary>
            A set of key value pairs that are common to all records and clusters throughout the process execution.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseEventArgs.Phase">
      <summary>
            Phase of the pipeline: Intake, Transformation or Output
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseEventArgs.RecCnt">
      <summary>
            Total number of records processed by the phase (0 in case of PhaseStarting event).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseEventArgs.TransfmrNo">
      <summary>
            Zero based transformer's sequence number for Transformation phase (values greater than 0 reserved for future use).
            Always -1 in case of Intake or Output phase.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.PhaseStatus">
      <summary>
            Immutable type that describes the current state of a given phase of the Data Conveyer process.
            Instances are returned by the GetProcessingStatus method (of record and cluster).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseStatus.ClusterCount">
      <summary>
            Number of clusters processed so far by the phase.
            Becomes total clusters processed upon phase completion.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseStatus.Phase">
      <summary>
            One of: <see cref="F:Mavidian.DataConveyer.Common.Phase.Intake">Intake</see>, <see cref="F:Mavidian.DataConveyer.Common.Phase.Transformation">Transformation</see> or <see cref="F:Mavidian.DataConveyer.Common.Phase.Output">Output</see>.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseStatus.RecordCount">
      <summary>
            Number of records processed so far by the phase.
            Becomes total records processed upon phase completion.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseStatus.State">
      <summary>
            One of: <see cref="F:Mavidian.DataConveyer.Common.ExecutionState.NotYetStarted">NotYetStarted</see>, <see cref="F:Mavidian.DataConveyer.Common.ExecutionState.Running">Running</see> or <see cref="F:Mavidian.DataConveyer.Common.ExecutionState.Complete">Complete</see>.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.PhaseStatus.TransfmrNo">
      <summary>
            Transformer sequence number, i.e. 0-based index (always -1 in case of Intake or Output). 
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.ProcessResult">
      <summary>
            Result from a task returned by the orchestrator execution.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProcessResult.ClustersRead">
      <summary>
            Number of clusters created during intake process. Head cluster and/or foot cluster are included if present.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProcessResult.ClustersWritten">
      <summary>
            Number of output clusters created. Head cluster and/or foot cluster are included if present on output. 
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProcessResult.CompletionStatus">
      <summary>
            Reason for completion of process execution.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProcessResult.GlobalCache">
      <summary>
            A set of key value pairs that are common to all records and clusters throughout the process execution.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProcessResult.RowsRead">
      <summary>
            Number of all rows read from intake, including header row(s) if applicable.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProcessResult.RowsWritten">
      <summary>
            Number of all rows sent to output, including rows constituting leader, header, head cluster, foot cluster and trailer as applicable.
            </summary>
    </member>
    <member name="T:Mavidian.DataConveyer.Orchestrators.ProgressEventArgs">
      <summary>
            Arguments for ProgressChanged event
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProgressEventArgs.ClstrCnt">
      <summary>
            Number of clusters processed so far by the phase, including current cluster.
            In case of Transformation phase, this number refers to clusters before transformation, and not after (note that transformation may add or delete clusters).
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProgressEventArgs.ClstrNo">
      <summary>
            Sequence number of current cluster (1 based).
            This number is assigned on Intake and in other phases may be different than ClstrCnt in case of cluster additions/deletions during transformations.
            Example: if clusters are doubled in transform, then ClstrCnt value in output are: 1,2,3,4,... while ClstrNo values are: 1,1,2,2,...
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProgressEventArgs.GlobalCache">
      <summary>
            A set of key value pairs that are common to all records and clusters throughout the process execution.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProgressEventArgs.Phase">
      <summary>
            Phase of the pipeline: Intake, Transformation or Output
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProgressEventArgs.RecCnt">
      <summary>
            Number of records processed so far by the phase, including all records in current cluster.
            In case of Transformation phase, this number refers to records before transformation, and not after (note that transformation may add or delete records).
            In Intake phase, header row does not count towards RecCnt.
            In Output phase, leader, header and trailer rows do not count towards RecCnt.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProgressEventArgs.RecNo">
      <summary>
            Sequence number (1 based) of the first record in current cluster as it appeared on Intake (i.e. before any transformations).
            This number is determined when clusters are formed during Intake and remains unchanged even as records are added or deleted during transformations; it corresponds to the cluster's StartRecNo.
            Note 2 special values: 0 (<see cref="F:Mavidian.DataConveyer.Common.Constants.HeadClusterRecNo" />) in case of head cluster and -1 (<see cref="F:Mavidian.DataConveyer.Common.Constants.FootClusterRecNo" /> in case of foot cluster.
            </summary>
    </member>
    <member name="P:Mavidian.DataConveyer.Orchestrators.ProgressEventArgs.TransfmrNo">
      <summary>
            Transformer's sequence number for Transformation phase; always -1 for Intake and Output
            </summary>
    </member>
  </members>
</doc>